
SK_SD_Music.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005138  08005138  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053cc  20000070  080051b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000543c  080051b0  0002543c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e693  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cd  00000000  00000000  0002e733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00030c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  000319d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018817  00000000  00000000  00032678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104f0  00000000  00000000  0004ae8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f671  00000000  00000000  0005b37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea9f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a0  00000000  00000000  000eaa40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f9c 	.word	0x08004f9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004f9c 	.word	0x08004f9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <MX_GPIO_Init+0x110>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a3c      	ldr	r2, [pc, #240]	; (8000694 <MX_GPIO_Init+0x110>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <MX_GPIO_Init+0x110>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b36      	ldr	r3, [pc, #216]	; (8000694 <MX_GPIO_Init+0x110>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a35      	ldr	r2, [pc, #212]	; (8000694 <MX_GPIO_Init+0x110>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <MX_GPIO_Init+0x110>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <MX_GPIO_Init+0x110>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a2e      	ldr	r2, [pc, #184]	; (8000694 <MX_GPIO_Init+0x110>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_GPIO_Init+0x110>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_GPIO_Init+0x110>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a27      	ldr	r2, [pc, #156]	; (8000694 <MX_GPIO_Init+0x110>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_GPIO_Init+0x110>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000610:	4821      	ldr	r0, [pc, #132]	; (8000698 <MX_GPIO_Init+0x114>)
 8000612:	f001 fcb9 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2140      	movs	r1, #64	; 0x40
 800061a:	4820      	ldr	r0, [pc, #128]	; (800069c <MX_GPIO_Init+0x118>)
 800061c:	f001 fcb4 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	4817      	ldr	r0, [pc, #92]	; (8000698 <MX_GPIO_Init+0x114>)
 800063a:	f001 fb21 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UKEY_Pin;
 800063e:	2301      	movs	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UKEY_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_GPIO_Init+0x11c>)
 8000652:	f001 fb15 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000656:	2340      	movs	r3, #64	; 0x40
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0x118>)
 800066e:	f001 fb07 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_DET_Pin|SD_WP_Pin;
 8000672:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_GPIO_Init+0x118>)
 8000688:	f001 fafa 	bl	8001c80 <HAL_GPIO_Init>

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020800 	.word	0x40020800
 800069c:	40020400 	.word	0x40020400
 80006a0:	40020000 	.word	0x40020000

080006a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006aa:	f001 f91f 	bl	80018ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ae:	f000 f945 	bl	800093c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	RingBuffer_Init(&music_ringbuf, music_buf, 20480);
 80006b2:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80006b6:	4996      	ldr	r1, [pc, #600]	; (8000910 <main+0x26c>)
 80006b8:	4896      	ldr	r0, [pc, #600]	; (8000914 <main+0x270>)
 80006ba:	f000 fa07 	bl	8000acc <RingBuffer_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006be:	f7ff ff61 	bl	8000584 <MX_GPIO_Init>
	MX_SPI1_Init();
 80006c2:	f000 fda5 	bl	8001210 <MX_SPI1_Init>
	MX_SPI3_Init();
 80006c6:	f000 fdd9 	bl	800127c <MX_SPI3_Init>
	MX_TIM2_Init();
 80006ca:	f000 ffdf 	bl	800168c <MX_TIM2_Init>
	MX_TIM10_Init();
 80006ce:	f001 f83f 	bl	8001750 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	hsd1.CS_Pin = SD_CS_Pin;
 80006d2:	4b91      	ldr	r3, [pc, #580]	; (8000918 <main+0x274>)
 80006d4:	2240      	movs	r2, #64	; 0x40
 80006d6:	811a      	strh	r2, [r3, #8]
	hsd1.CS_Port = SD_CS_GPIO_Port;
 80006d8:	4b8f      	ldr	r3, [pc, #572]	; (8000918 <main+0x274>)
 80006da:	4a90      	ldr	r2, [pc, #576]	; (800091c <main+0x278>)
 80006dc:	605a      	str	r2, [r3, #4]
	hsd1.DET_Pin = SD_DET_Pin;
 80006de:	4b8e      	ldr	r3, [pc, #568]	; (8000918 <main+0x274>)
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	821a      	strh	r2, [r3, #16]
	hsd1.DET_Port = SD_DET_GPIO_Port;
 80006e4:	4b8c      	ldr	r3, [pc, #560]	; (8000918 <main+0x274>)
 80006e6:	4a8d      	ldr	r2, [pc, #564]	; (800091c <main+0x278>)
 80006e8:	60da      	str	r2, [r3, #12]
	hsd1.WP_Pin = SD_WP_Pin;
 80006ea:	4b8b      	ldr	r3, [pc, #556]	; (8000918 <main+0x274>)
 80006ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f0:	831a      	strh	r2, [r3, #24]
	hsd1.WP_Port = SD_WP_GPIO_Port;
 80006f2:	4b89      	ldr	r3, [pc, #548]	; (8000918 <main+0x274>)
 80006f4:	4a89      	ldr	r2, [pc, #548]	; (800091c <main+0x278>)
 80006f6:	615a      	str	r2, [r3, #20]
	hsd1.hspi = &hspi3;
 80006f8:	4b87      	ldr	r3, [pc, #540]	; (8000918 <main+0x274>)
 80006fa:	4a89      	ldr	r2, [pc, #548]	; (8000920 <main+0x27c>)
 80006fc:	601a      	str	r2, [r3, #0]
//	SD_Init(&hsd1);
	uint32_t i=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
	do{
		SD_Init(&hsd1);
 8000702:	4885      	ldr	r0, [pc, #532]	; (8000918 <main+0x274>)
 8000704:	f000 faea 	bl	8000cdc <SD_Init>
	}while((i=SD_Read_Block(&hsd1, rx_buff, blockno))==0);
 8000708:	4b86      	ldr	r3, [pc, #536]	; (8000924 <main+0x280>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4986      	ldr	r1, [pc, #536]	; (8000928 <main+0x284>)
 8000710:	4881      	ldr	r0, [pc, #516]	; (8000918 <main+0x274>)
 8000712:	f000 fc25 	bl	8000f60 <SD_Read_Block>
 8000716:	4603      	mov	r3, r0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0f0      	beq.n	8000702 <main+0x5e>

	for (i = 0; i < 512; ++i) {
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	e0a8      	b.n	8000878 <main+0x1d4>
		if (rx_buff[i] == 'R') {
 8000726:	4a80      	ldr	r2, [pc, #512]	; (8000928 <main+0x284>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b52      	cmp	r3, #82	; 0x52
 8000730:	f040 809f 	bne.w	8000872 <main+0x1ce>
			if (rx_buff[i + 1] == 'I') {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	4a7b      	ldr	r2, [pc, #492]	; (8000928 <main+0x284>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	2b49      	cmp	r3, #73	; 0x49
 800073e:	f040 8098 	bne.w	8000872 <main+0x1ce>
				if (rx_buff[i + 2] == 'F') {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3302      	adds	r3, #2
 8000746:	4a78      	ldr	r2, [pc, #480]	; (8000928 <main+0x284>)
 8000748:	5cd3      	ldrb	r3, [r2, r3]
 800074a:	2b46      	cmp	r3, #70	; 0x46
 800074c:	f040 8091 	bne.w	8000872 <main+0x1ce>
					if (rx_buff[i + 3] == 'F') {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3303      	adds	r3, #3
 8000754:	4a74      	ldr	r2, [pc, #464]	; (8000928 <main+0x284>)
 8000756:	5cd3      	ldrb	r3, [r2, r3]
 8000758:	2b46      	cmp	r3, #70	; 0x46
 800075a:	f040 808a 	bne.w	8000872 <main+0x1ce>
						music.address = blockno * 512 + i;
 800075e:	4b71      	ldr	r3, [pc, #452]	; (8000924 <main+0x280>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	025a      	lsls	r2, r3, #9
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	4a70      	ldr	r2, [pc, #448]	; (800092c <main+0x288>)
 800076a:	6013      	str	r3, [r2, #0]
						i += 4;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3304      	adds	r3, #4
 8000770:	607b      	str	r3, [r7, #4]
						music.length = rx_buff[i++];
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	4a6b      	ldr	r2, [pc, #428]	; (8000928 <main+0x284>)
 800077a:	5cd3      	ldrb	r3, [r2, r3]
 800077c:	461a      	mov	r2, r3
 800077e:	4b6b      	ldr	r3, [pc, #428]	; (800092c <main+0x288>)
 8000780:	605a      	str	r2, [r3, #4]
						music.length = music.length << 8;
 8000782:	4b6a      	ldr	r3, [pc, #424]	; (800092c <main+0x288>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	4a68      	ldr	r2, [pc, #416]	; (800092c <main+0x288>)
 800078a:	6053      	str	r3, [r2, #4]
						music.length |= rx_buff[i++];
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	4a65      	ldr	r2, [pc, #404]	; (8000928 <main+0x284>)
 8000794:	5cd2      	ldrb	r2, [r2, r3]
 8000796:	4b65      	ldr	r3, [pc, #404]	; (800092c <main+0x288>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	4a63      	ldr	r2, [pc, #396]	; (800092c <main+0x288>)
 800079e:	6053      	str	r3, [r2, #4]
						music.length = music.length << 8;
 80007a0:	4b62      	ldr	r3, [pc, #392]	; (800092c <main+0x288>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	4a61      	ldr	r2, [pc, #388]	; (800092c <main+0x288>)
 80007a8:	6053      	str	r3, [r2, #4]
						music.length |= rx_buff[i++];
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	4a5d      	ldr	r2, [pc, #372]	; (8000928 <main+0x284>)
 80007b2:	5cd2      	ldrb	r2, [r2, r3]
 80007b4:	4b5d      	ldr	r3, [pc, #372]	; (800092c <main+0x288>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	4a5c      	ldr	r2, [pc, #368]	; (800092c <main+0x288>)
 80007bc:	6053      	str	r3, [r2, #4]
						music.length = music.length << 8;
 80007be:	4b5b      	ldr	r3, [pc, #364]	; (800092c <main+0x288>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	4a59      	ldr	r2, [pc, #356]	; (800092c <main+0x288>)
 80007c6:	6053      	str	r3, [r2, #4]
						music.length |= rx_buff[i++];
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	4a56      	ldr	r2, [pc, #344]	; (8000928 <main+0x284>)
 80007d0:	5cd2      	ldrb	r2, [r2, r3]
 80007d2:	4b56      	ldr	r3, [pc, #344]	; (800092c <main+0x288>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	4a54      	ldr	r2, [pc, #336]	; (800092c <main+0x288>)
 80007da:	6053      	str	r3, [r2, #4]
						i += 8;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3308      	adds	r3, #8
 80007e0:	607b      	str	r3, [r7, #4]
						music.bits_per_sample = rx_buff[i];
 80007e2:	4a51      	ldr	r2, [pc, #324]	; (8000928 <main+0x284>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	4b50      	ldr	r3, [pc, #320]	; (800092c <main+0x288>)
 80007ec:	735a      	strb	r2, [r3, #13]
						i += 6;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3306      	adds	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
						music.channels = rx_buff[i];
 80007f4:	4a4c      	ldr	r2, [pc, #304]	; (8000928 <main+0x284>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b4b      	ldr	r3, [pc, #300]	; (800092c <main+0x288>)
 80007fe:	731a      	strb	r2, [r3, #12]
						i += 2;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3302      	adds	r3, #2
 8000804:	607b      	str	r3, [r7, #4]
						music.samplerate = rx_buff[i++];
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	4a46      	ldr	r2, [pc, #280]	; (8000928 <main+0x284>)
 800080e:	5cd3      	ldrb	r3, [r2, r3]
 8000810:	461a      	mov	r2, r3
 8000812:	4b46      	ldr	r3, [pc, #280]	; (800092c <main+0x288>)
 8000814:	609a      	str	r2, [r3, #8]
						music.samplerate = music.length << 8;
 8000816:	4b45      	ldr	r3, [pc, #276]	; (800092c <main+0x288>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	4a43      	ldr	r2, [pc, #268]	; (800092c <main+0x288>)
 800081e:	6093      	str	r3, [r2, #8]
						music.samplerate |= rx_buff[i++];
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	4a40      	ldr	r2, [pc, #256]	; (8000928 <main+0x284>)
 8000828:	5cd2      	ldrb	r2, [r2, r3]
 800082a:	4b40      	ldr	r3, [pc, #256]	; (800092c <main+0x288>)
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	4313      	orrs	r3, r2
 8000830:	4a3e      	ldr	r2, [pc, #248]	; (800092c <main+0x288>)
 8000832:	6093      	str	r3, [r2, #8]
						music.samplerate = music.length << 8;
 8000834:	4b3d      	ldr	r3, [pc, #244]	; (800092c <main+0x288>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	4a3c      	ldr	r2, [pc, #240]	; (800092c <main+0x288>)
 800083c:	6093      	str	r3, [r2, #8]
						music.samplerate |= rx_buff[i++];
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	4a38      	ldr	r2, [pc, #224]	; (8000928 <main+0x284>)
 8000846:	5cd2      	ldrb	r2, [r2, r3]
 8000848:	4b38      	ldr	r3, [pc, #224]	; (800092c <main+0x288>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	4313      	orrs	r3, r2
 800084e:	4a37      	ldr	r2, [pc, #220]	; (800092c <main+0x288>)
 8000850:	6093      	str	r3, [r2, #8]
						music.samplerate = music.length << 8;
 8000852:	4b36      	ldr	r3, [pc, #216]	; (800092c <main+0x288>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	4a34      	ldr	r2, [pc, #208]	; (800092c <main+0x288>)
 800085a:	6093      	str	r3, [r2, #8]
						music.samplerate |= rx_buff[i++];
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	4a31      	ldr	r2, [pc, #196]	; (8000928 <main+0x284>)
 8000864:	5cd2      	ldrb	r2, [r2, r3]
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <main+0x288>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	4313      	orrs	r3, r2
 800086c:	4a2f      	ldr	r2, [pc, #188]	; (800092c <main+0x288>)
 800086e:	6093      	str	r3, [r2, #8]
						break;
 8000870:	e007      	b.n	8000882 <main+0x1de>
	for (i = 0; i < 512; ++i) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3301      	adds	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800087e:	f4ff af52 	bcc.w	8000726 <main+0x82>

				}
			}
		}
	}
	if (music.length != 0) {
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <main+0x288>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d01d      	beq.n	80008c6 <main+0x222>
		//read samples, write to ringbuff,/**/ start playing
		i+=16;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3310      	adds	r3, #16
 800088e:	607b      	str	r3, [r7, #4]
		for (;i  < 512; i++) {
 8000890:	e00a      	b.n	80008a8 <main+0x204>
			RingBuffer_PutChar(&music_ringbuf, rx_buff[i]);
 8000892:	4a25      	ldr	r2, [pc, #148]	; (8000928 <main+0x284>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	481d      	ldr	r0, [pc, #116]	; (8000914 <main+0x270>)
 800089e:	f000 f991 	bl	8000bc4 <RingBuffer_PutChar>
		for (;i  < 512; i++) {
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008ae:	d3f0      	bcc.n	8000892 <main+0x1ee>
		}


		HAL_TIM_Base_Start_IT(&htim10);
 80008b0:	481f      	ldr	r0, [pc, #124]	; (8000930 <main+0x28c>)
 80008b2:	f002 fd47 	bl	8003344 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80008b6:	2104      	movs	r1, #4
 80008b8:	481e      	ldr	r0, [pc, #120]	; (8000934 <main+0x290>)
 80008ba:	f002 fdf5 	bl	80034a8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80008be:	2108      	movs	r1, #8
 80008c0:	481c      	ldr	r0, [pc, #112]	; (8000934 <main+0x290>)
 80008c2:	f002 fdf1 	bl	80034a8 <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (mysd_need_samples) {
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <main+0x294>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0fb      	beq.n	80008c6 <main+0x222>
			SD_Read_Block(&hsd1, rx_buff, blockno++);
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <main+0x280>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	4913      	ldr	r1, [pc, #76]	; (8000924 <main+0x280>)
 80008d6:	600a      	str	r2, [r1, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4913      	ldr	r1, [pc, #76]	; (8000928 <main+0x284>)
 80008dc:	480e      	ldr	r0, [pc, #56]	; (8000918 <main+0x274>)
 80008de:	f000 fb3f 	bl	8000f60 <SD_Read_Block>
			for (int i = 0; i < 512; ++i) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	e00a      	b.n	80008fe <main+0x25a>
				RingBuffer_PutChar(&music_ringbuf, rx_buff[i]);
 80008e8:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <main+0x284>)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <main+0x270>)
 80008f4:	f000 f966 	bl	8000bc4 <RingBuffer_PutChar>
			for (int i = 0; i < 512; ++i) {
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000904:	dbf0      	blt.n	80008e8 <main+0x244>

			}
			mysd_need_samples = 0;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <main+0x294>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
		if (mysd_need_samples) {
 800090c:	e7db      	b.n	80008c6 <main+0x222>
 800090e:	bf00      	nop
 8000910:	200002bc 	.word	0x200002bc
 8000914:	200052bc 	.word	0x200052bc
 8000918:	2000008c 	.word	0x2000008c
 800091c:	40020400 	.word	0x40020400
 8000920:	2000533c 	.word	0x2000533c
 8000924:	200000b8 	.word	0x200000b8
 8000928:	200000bc 	.word	0x200000bc
 800092c:	200052d0 	.word	0x200052d0
 8000930:	200053e0 	.word	0x200053e0
 8000934:	20005398 	.word	0x20005398
 8000938:	200052e3 	.word	0x200052e3

0800093c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000942:	f107 0320 	add.w	r3, r7, #32
 8000946:	2230      	movs	r2, #48	; 0x30
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fb5c 	bl	8004008 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <SystemClock_Config+0xd0>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <SystemClock_Config+0xd0>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <SystemClock_Config+0xd0>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <SystemClock_Config+0xd4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000988:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <SystemClock_Config+0xd4>)
 800098a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <SystemClock_Config+0xd4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80009b0:	2319      	movs	r3, #25
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009be:	2304      	movs	r3, #4
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 faf8 	bl	8001fbc <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x9a>
		Error_Handler();
 80009d2:	f000 f875 	bl	8000ac0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fd5a 	bl	80024ac <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xc6>
		Error_Handler();
 80009fe:	f000 f85f 	bl	8000ac0 <Error_Handler>
	}
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	; 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	//TODO
	if (htim->Instance == TIM10) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d138      	bne.n	8000a98 <HAL_TIM_PeriodElapsedCallback+0x84>
		//pobranie sampli jesli zawartosc bufora jest mniejsza niz np 512
		if (music_ringbuf.len < 2048) {
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a2e:	d202      	bcs.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x22>
			mysd_need_samples = 1;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
		}
		if (music.channels == 2) {
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a38:	7b1b      	ldrb	r3, [r3, #12]
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d11a      	bne.n	8000a74 <HAL_TIM_PeriodElapsedCallback+0x60>
			RingBuffer_GetChar(&music_ringbuf, &c);
 8000a3e:	491c      	ldr	r1, [pc, #112]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a40:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a42:	f000 f8ff 	bl	8000c44 <RingBuffer_GetChar>
			lbuf = c;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a4c:	701a      	strb	r2, [r3, #0]
			RingBuffer_GetChar(&music_ringbuf, &c);
 8000a4e:	4918      	ldr	r1, [pc, #96]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a50:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a52:	f000 f8f7 	bl	8000c44 <RingBuffer_GetChar>
			rbuf = c;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a5c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, lbuf);
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, rbuf);
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, lbuf);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, lbuf);
		}
	}

}
 8000a72:	e011      	b.n	8000a98 <HAL_TIM_PeriodElapsedCallback+0x84>
			RingBuffer_GetChar(&music_ringbuf, &c);
 8000a74:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a78:	f000 f8e4 	bl	8000c44 <RingBuffer_GetChar>
			lbuf = c;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a82:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, lbuf);
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, lbuf);
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40014400 	.word	0x40014400
 8000aa4:	200052bc 	.word	0x200052bc
 8000aa8:	200052e3 	.word	0x200052e3
 8000aac:	200052d0 	.word	0x200052d0
 8000ab0:	200052e0 	.word	0x200052e0
 8000ab4:	200052e1 	.word	0x200052e1
 8000ab8:	200052e2 	.word	0x200052e2
 8000abc:	20005398 	.word	0x20005398

08000ac0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <RingBuffer_Init>:
#endif
#include <assert.h>
#include "ring_buffer.h"

bool RingBuffer_Init(RingBuffer *ringBuffer, uint8_t *dataBuffer,
		size_t dataBufferSize) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	assert(ringBuffer);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <RingBuffer_Init+0x1e>
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <RingBuffer_Init+0x74>)
 8000ae0:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <RingBuffer_Init+0x78>)
 8000ae2:	210a      	movs	r1, #10
 8000ae4:	4818      	ldr	r0, [pc, #96]	; (8000b48 <RingBuffer_Init+0x7c>)
 8000ae6:	f003 fa35 	bl	8003f54 <__assert_func>
	assert(dataBuffer);
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d105      	bne.n	8000afc <RingBuffer_Init+0x30>
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <RingBuffer_Init+0x80>)
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <RingBuffer_Init+0x78>)
 8000af4:	210b      	movs	r1, #11
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <RingBuffer_Init+0x7c>)
 8000af8:	f003 fa2c 	bl	8003f54 <__assert_func>
	assert(dataBufferSize > 0);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d105      	bne.n	8000b0e <RingBuffer_Init+0x42>
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <RingBuffer_Init+0x84>)
 8000b04:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <RingBuffer_Init+0x78>)
 8000b06:	210c      	movs	r1, #12
 8000b08:	480f      	ldr	r0, [pc, #60]	; (8000b48 <RingBuffer_Init+0x7c>)
 8000b0a:	f003 fa23 	bl	8003f54 <__assert_func>

	if ((ringBuffer) && (dataBuffer) && (dataBufferSize > 0)) {
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d010      	beq.n	8000b36 <RingBuffer_Init+0x6a>
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00d      	beq.n	8000b36 <RingBuffer_Init+0x6a>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00a      	beq.n	8000b36 <RingBuffer_Init+0x6a>
		ringBuffer->buffer = dataBuffer;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	601a      	str	r2, [r3, #0]
		ringBuffer->size = dataBufferSize;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	60da      	str	r2, [r3, #12]
		return RingBuffer_Clear(ringBuffer);
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 f811 	bl	8000b54 <RingBuffer_Clear>
 8000b32:	4603      	mov	r3, r0
 8000b34:	e000      	b.n	8000b38 <RingBuffer_Init+0x6c>
	}

	return false;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	08004fb4 	.word	0x08004fb4
 8000b44:	08005000 	.word	0x08005000
 8000b48:	08004fc0 	.word	0x08004fc0
 8000b4c:	08004fdc 	.word	0x08004fdc
 8000b50:	08004fe8 	.word	0x08004fe8

08000b54 <RingBuffer_Clear>:

bool RingBuffer_Clear(RingBuffer *ringBuffer) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	assert(ringBuffer);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d105      	bne.n	8000b6e <RingBuffer_Clear+0x1a>
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <RingBuffer_Clear+0x64>)
 8000b64:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <RingBuffer_Clear+0x68>)
 8000b66:	2118      	movs	r1, #24
 8000b68:	4815      	ldr	r0, [pc, #84]	; (8000bc0 <RingBuffer_Clear+0x6c>)
 8000b6a:	f003 f9f3 	bl	8003f54 <__assert_func>

	if (ringBuffer) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d01b      	beq.n	8000bac <RingBuffer_Clear+0x58>
	    ringBuffer->head = 0;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
		ringBuffer->tail = 0;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
		ringBuffer->len=0;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
		for (int i = 0; i < ringBuffer->size; ++i) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	e008      	b.n	8000b9e <RingBuffer_Clear+0x4a>
			ringBuffer->buffer[i] = 0;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < ringBuffer->size; ++i) {
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f1      	bhi.n	8000b8c <RingBuffer_Clear+0x38>
		}
		return true;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <RingBuffer_Clear+0x5a>
	}
	return false;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	08004fb4 	.word	0x08004fb4
 8000bbc:	08005010 	.word	0x08005010
 8000bc0:	08004fc0 	.word	0x08004fc0

08000bc4 <RingBuffer_PutChar>:
		return ringBuffer->size;
	}
	return 0;
}

bool RingBuffer_PutChar(RingBuffer *ringBuffer, uint8_t c) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
	assert(ringBuffer);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d105      	bne.n	8000be2 <RingBuffer_PutChar+0x1e>
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <RingBuffer_PutChar+0x74>)
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <RingBuffer_PutChar+0x78>)
 8000bda:	2142      	movs	r1, #66	; 0x42
 8000bdc:	4818      	ldr	r0, [pc, #96]	; (8000c40 <RingBuffer_PutChar+0x7c>)
 8000bde:	f003 f9b9 	bl	8003f54 <__assert_func>

	if (ringBuffer) {
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d021      	beq.n	8000c2c <RingBuffer_PutChar+0x68>
	   // printf("head:%d\ttail:%d\tsize:%d\n",ringBuffer->head,ringBuffer->tail,ringBuffer->size);
	   if(ringBuffer->len==ringBuffer->size)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691a      	ldr	r2, [r3, #16]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d101      	bne.n	8000bf8 <RingBuffer_PutChar+0x34>
	    return false;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e01a      	b.n	8000c2e <RingBuffer_PutChar+0x6a>
        ringBuffer->buffer[ringBuffer->head++]=c;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	1c58      	adds	r0, r3, #1
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	6048      	str	r0, [r1, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	78fa      	ldrb	r2, [r7, #3]
 8000c0a:	701a      	strb	r2, [r3, #0]
        ringBuffer->len++;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	611a      	str	r2, [r3, #16]
        if(ringBuffer->head>=(ringBuffer->size))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d302      	bcc.n	8000c28 <RingBuffer_PutChar+0x64>
            ringBuffer->head=0;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
		return true;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <RingBuffer_PutChar+0x6a>
	}
	return false;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	08004fb4 	.word	0x08004fb4
 8000c3c:	08005024 	.word	0x08005024
 8000c40:	08004fc0 	.word	0x08004fc0

08000c44 <RingBuffer_GetChar>:

bool RingBuffer_GetChar(RingBuffer *ringBuffer, uint8_t *c) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	assert(ringBuffer);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d105      	bne.n	8000c60 <RingBuffer_GetChar+0x1c>
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <RingBuffer_GetChar+0x88>)
 8000c56:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <RingBuffer_GetChar+0x8c>)
 8000c58:	2152      	movs	r1, #82	; 0x52
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <RingBuffer_GetChar+0x90>)
 8000c5c:	f003 f97a 	bl	8003f54 <__assert_func>
	assert(c);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d105      	bne.n	8000c72 <RingBuffer_GetChar+0x2e>
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <RingBuffer_GetChar+0x94>)
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <RingBuffer_GetChar+0x8c>)
 8000c6a:	2153      	movs	r1, #83	; 0x53
 8000c6c:	4819      	ldr	r0, [pc, #100]	; (8000cd4 <RingBuffer_GetChar+0x90>)
 8000c6e:	f003 f971 	bl	8003f54 <__assert_func>

	if ((ringBuffer) && (c)) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d023      	beq.n	8000cc0 <RingBuffer_GetChar+0x7c>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d020      	beq.n	8000cc0 <RingBuffer_GetChar+0x7c>
	    //printf("head:%d\ttail:%d\tsize:%d\n",ringBuffer->head,ringBuffer->tail,ringBuffer->size);
		if(ringBuffer->len==0)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <RingBuffer_GetChar+0x46>
		    return false;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e01b      	b.n	8000cc2 <RingBuffer_GetChar+0x7e>
		*c=ringBuffer->buffer[ringBuffer->tail++];
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	1c58      	adds	r0, r3, #1
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	6088      	str	r0, [r1, #8]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	701a      	strb	r2, [r3, #0]
		ringBuffer->len--;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	1e5a      	subs	r2, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	611a      	str	r2, [r3, #16]
		if(ringBuffer->tail>=ringBuffer->size)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d302      	bcc.n	8000cbc <RingBuffer_GetChar+0x78>
		ringBuffer->tail=0;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
		return true;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <RingBuffer_GetChar+0x7e>
	}
	return false;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	08004fb4 	.word	0x08004fb4
 8000cd0:	08005038 	.word	0x08005038
 8000cd4:	08004fc0 	.word	0x08004fc0
 8000cd8:	08004ffc 	.word	0x08004ffc

08000cdc <SD_Init>:
 */
/**
 * @brief function which initilaizes sd card i SPI mode.
 * @param handle to sd structure in which sd is described.
 */
void SD_Init(SD_HandleTypeDef *hsd) {
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	//DONE?
	CMD_Frame tmp_frame;
	uint32_t cnt = 0x1fff;
 8000ce4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ocr[4], n;
	//reset card
	SD_Deselect(hsd);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 f9fd 	bl	80010ea <SD_Deselect>
	for (int i = 0; i < 12; ++i) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	e006      	b.n	8000d04 <SD_Init+0x28>
		SPI_TxByte(hsd, 0xff);
 8000cf6:	21ff      	movs	r1, #255	; 0xff
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 fa09 	bl	8001110 <SPI_TxByte>
	for (int i = 0; i < 12; ++i) {
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3301      	adds	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	2b0b      	cmp	r3, #11
 8000d08:	ddf5      	ble.n	8000cf6 <SD_Init+0x1a>
	}
	SD_Select(hsd);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f9da 	bl	80010c4 <SD_Select>
	tmp_frame.argument = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
	tmp_frame.cmd_index = CMD0;
 8000d14:	2340      	movs	r3, #64	; 0x40
 8000d16:	733b      	strb	r3, [r7, #12]
	tmp_frame.crc = 0x95;
 8000d18:	2395      	movs	r3, #149	; 0x95
 8000d1a:	753b      	strb	r3, [r7, #20]
	SPI_TxBuffer(hsd, &tmp_frame, sizeof(tmp_frame));
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	220c      	movs	r2, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 fa0d 	bl	8001144 <SPI_TxBuffer>
	while ((SPI_RxByte(hsd) != 0x01) && cnt) {
 8000d2a:	e002      	b.n	8000d32 <SD_Init+0x56>
		cnt--;
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
	while ((SPI_RxByte(hsd) != 0x01) && cnt) {
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 fa21 	bl	800117a <SPI_RxByte>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d002      	beq.n	8000d44 <SD_Init+0x68>
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f3      	bne.n	8000d2c <SD_Init+0x50>
	}
	SD_Deselect(hsd);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f9d0 	bl	80010ea <SD_Deselect>
	SPI_TxByte(hsd, 0XFF);
 8000d4a:	21ff      	movs	r1, #255	; 0xff
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 f9df 	bl	8001110 <SPI_TxByte>
	hsd->state = SD_POWERED;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
	//init
	SD_Select(hsd);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f9b2 	bl	80010c4 <SD_Select>
	uint8_t type = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	76fb      	strb	r3, [r7, #27]
	if (SD_SendCmd(hsd, CMD0, 0) == 1) {
 8000d64:	2200      	movs	r2, #0
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f94b 	bl	8001004 <SD_SendCmd>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	f040 80b9 	bne.w	8000ee8 <SD_Init+0x20c>
		/* timeout 1 sec */
		timer1 = 1000;
 8000d76:	4b6b      	ldr	r3, [pc, #428]	; (8000f24 <SD_Init+0x248>)
 8000d78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d7c:	601a      	str	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(hsd, CMD8, 0x1AA) == 1) {
 8000d7e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8000d82:	2148      	movs	r1, #72	; 0x48
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f93d 	bl	8001004 <SD_SendCmd>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d166      	bne.n	8000e5e <SD_Init+0x182>
			/* operation condition register */
			for (n = 0; n < 4; n++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000d96:	e010      	b.n	8000dba <SD_Init+0xde>
				ocr[n] = SPI_RxByte(hsd);
 8000d98:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f9ec 	bl	800117a <SPI_RxByte>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8000daa:	443b      	add	r3, r7
 8000dac:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (n = 0; n < 4; n++) {
 8000db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000db4:	3301      	adds	r3, #1
 8000db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d9ea      	bls.n	8000d98 <SD_Init+0xbc>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
 8000dc2:	7abb      	ldrb	r3, [r7, #10]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f040 808f 	bne.w	8000ee8 <SD_Init+0x20c>
 8000dca:	7afb      	ldrb	r3, [r7, #11]
 8000dcc:	2baa      	cmp	r3, #170	; 0xaa
 8000dce:	f040 808b 	bne.w	8000ee8 <SD_Init+0x20c>
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(hsd, CMD55, 0) <= 1
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2177      	movs	r1, #119	; 0x77
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f914 	bl	8001004 <SD_SendCmd>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d808      	bhi.n	8000df4 <SD_Init+0x118>
							&& SD_SendCmd(hsd, CMD41, 1UL << 30) == 0)
 8000de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de6:	2169      	movs	r1, #105	; 0x69
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f90b 	bl	8001004 <SD_SendCmd>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d004      	beq.n	8000dfe <SD_Init+0x122>
						break;
				} while (timer1);
 8000df4:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <SD_Init+0x248>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1ea      	bne.n	8000dd2 <SD_Init+0xf6>
 8000dfc:	e000      	b.n	8000e00 <SD_Init+0x124>
						break;
 8000dfe:	bf00      	nop

				/* READ_OCR */
				if (timer1 && SD_SendCmd(hsd, CMD58, 0) == 0) {
 8000e00:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <SD_Init+0x248>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d06f      	beq.n	8000ee8 <SD_Init+0x20c>
 8000e08:	2200      	movs	r2, #0
 8000e0a:	217a      	movs	r1, #122	; 0x7a
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f8f9 	bl	8001004 <SD_SendCmd>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d167      	bne.n	8000ee8 <SD_Init+0x20c>
					/* Check CCS bit */
					for (n = 0; n < 4; n++) {
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000e1e:	e010      	b.n	8000e42 <SD_Init+0x166>
						ocr[n] = SPI_RxByte(hsd);
 8000e20:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f9a8 	bl	800117a <SPI_RxByte>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8000e32:	443b      	add	r3, r7
 8000e34:	f803 2c20 	strb.w	r2, [r3, #-32]
					for (n = 0; n < 4; n++) {
 8000e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000e42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d9ea      	bls.n	8000e20 <SD_Init+0x144>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000e4a:	7a3b      	ldrb	r3, [r7, #8]
 8000e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SD_Init+0x17c>
 8000e54:	230c      	movs	r3, #12
 8000e56:	e000      	b.n	8000e5a <SD_Init+0x17e>
 8000e58:	2304      	movs	r3, #4
 8000e5a:	76fb      	strb	r3, [r7, #27]
 8000e5c:	e044      	b.n	8000ee8 <SD_Init+0x20c>
				}
			}
		} else {
			/* SDC V1 or MMC */
			type = (SD_SendCmd(hsd, CMD55, 0) <= 1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2177      	movs	r1, #119	; 0x77
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f8ce 	bl	8001004 <SD_SendCmd>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d809      	bhi.n	8000e82 <SD_Init+0x1a6>
					&& SD_SendCmd(hsd, CMD41, 0) <= 1) ?
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2169      	movs	r1, #105	; 0x69
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f8c6 	bl	8001004 <SD_SendCmd>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d801      	bhi.n	8000e82 <SD_Init+0x1a6>
			type = (SD_SendCmd(hsd, CMD55, 0) <= 1
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e000      	b.n	8000e84 <SD_Init+0x1a8>
 8000e82:	2301      	movs	r3, #1
 8000e84:	76fb      	strb	r3, [r7, #27]
			CT_SD1 :
															CT_MMC;

			do {
				if (type == CT_SD1) {
 8000e86:	7efb      	ldrb	r3, [r7, #27]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d110      	bne.n	8000eae <SD_Init+0x1d2>
					if (SD_SendCmd(hsd, CMD55, 0) <= 1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2177      	movs	r1, #119	; 0x77
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f8b7 	bl	8001004 <SD_SendCmd>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d810      	bhi.n	8000ebe <SD_Init+0x1e2>
							&& SD_SendCmd(hsd, CMD41, 0) == 0)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2169      	movs	r1, #105	; 0x69
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f8af 	bl	8001004 <SD_SendCmd>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d108      	bne.n	8000ebe <SD_Init+0x1e2>
						break; /* ACMD41 */
 8000eac:	e00d      	b.n	8000eca <SD_Init+0x1ee>
				} else {
					if (SD_SendCmd(hsd, CMD1, 0) == 0)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2141      	movs	r1, #65	; 0x41
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f8a6 	bl	8001004 <SD_SendCmd>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d004      	beq.n	8000ec8 <SD_Init+0x1ec>
						break; /* CMD1 */
				}

			} while (timer1);
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <SD_Init+0x248>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1df      	bne.n	8000e86 <SD_Init+0x1aa>
 8000ec6:	e000      	b.n	8000eca <SD_Init+0x1ee>
						break; /* CMD1 */
 8000ec8:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!timer1 || SD_SendCmd(hsd, CMD16, 512) != 0)
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <SD_Init+0x248>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d008      	beq.n	8000ee4 <SD_Init+0x208>
 8000ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed6:	2150      	movs	r1, #80	; 0x50
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f893 	bl	8001004 <SD_SendCmd>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SD_Init+0x20c>
				type = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	76fb      	strb	r3, [r7, #27]
		}
	}

	hsd->CardType = type;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7efa      	ldrb	r2, [r7, #27]
 8000eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Idle */
	SD_Deselect(hsd);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f8fa 	bl	80010ea <SD_Deselect>
	SPI_TxByte(hsd, 0xff);
 8000ef6:	21ff      	movs	r1, #255	; 0xff
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f909 	bl	8001110 <SPI_TxByte>

	/* Clear STA_NOINIT */
	if (type) {
 8000efe:	7efb      	ldrb	r3, [r7, #27]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <SD_Init+0x232>
		hsd->state = SD_INITIALIZED;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2202      	movs	r2, #2
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]
		/* Initialization failed */
		SD_DeInit(hsd);
		hsd->state = SD_ERROR;
	}

}
 8000f0c:	e006      	b.n	8000f1c <SD_Init+0x240>
		SD_DeInit(hsd);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 f80a 	bl	8000f28 <SD_DeInit>
		hsd->state = SD_ERROR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2203      	movs	r2, #3
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000f1c:	bf00      	nop
 8000f1e:	372c      	adds	r7, #44	; 0x2c
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	200000b0 	.word	0x200000b0

08000f28 <SD_DeInit>:
/**
 * @brief function which deinitilaizes sd card .
 * @param handle to sd structure in which sd is described.
 */
void SD_DeInit(SD_HandleTypeDef *hsd) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	//DONE?
	//stop transmission
	SD_Select(hsd);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f8c7 	bl	80010c4 <SD_Select>
	SD_SendCmd(hsd, CMD12, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	214c      	movs	r1, #76	; 0x4c
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f862 	bl	8001004 <SD_SendCmd>
	SD_Deselect(hsd);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f8d2 	bl	80010ea <SD_Deselect>
	SPI_TxByte(hsd, 0xff);
 8000f46:	21ff      	movs	r1, #255	; 0xff
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f8e1 	bl	8001110 <SPI_TxByte>
	//clear status
	hsd->state = SD_UNINITIALIZED;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <SD_Read_Block>:
 * @param handle to sd structure in which sd is described.
 * @param buffer where data has to be written.
 * @param block address to read.
 * @return true if operation was successful, false otherwise.
 */
int SD_Read_Block(SD_HandleTypeDef *hsd, uint8_t *datablock, uint32_t address) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	//DONE?
	SD_Select(hsd);
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f8a9 	bl	80010c4 <SD_Select>
	if (SD_SendCmd(hsd,CMD17, address)) {
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	2151      	movs	r1, #81	; 0x51
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f000 f844 	bl	8001004 <SD_SendCmd>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <SD_Read_Block+0x32>
		SD_Deselect(hsd);
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f000 f8b1 	bl	80010ea <SD_Deselect>
		SPI_RxByte(hsd);
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f000 f8f6 	bl	800117a <SPI_RxByte>
		return 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e032      	b.n	8000ff8 <SD_Read_Block+0x98>
	} else {
		uint8_t token;
		uint16_t len=512;
 8000f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f96:	82fb      	strh	r3, [r7, #22]
		/* timeout 200ms */
		timer1 = 200;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <SD_Read_Block+0xa0>)
 8000f9a:	22c8      	movs	r2, #200	; 0xc8
 8000f9c:	601a      	str	r2, [r3, #0]

		/* loop until receive a response or timeout */
		do {
			token = SPI_RxByte(hsd);
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f000 f8eb 	bl	800117a <SPI_RxByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	757b      	strb	r3, [r7, #21]
		} while ((token == 0xFF) && timer1);
 8000fa8:	7d7b      	ldrb	r3, [r7, #21]
 8000faa:	2bff      	cmp	r3, #255	; 0xff
 8000fac:	d103      	bne.n	8000fb6 <SD_Read_Block+0x56>
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <SD_Read_Block+0xa0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f3      	bne.n	8000f9e <SD_Read_Block+0x3e>

		/* invalid response */
		if (token != 0xFE)
 8000fb6:	7d7b      	ldrb	r3, [r7, #21]
 8000fb8:	2bfe      	cmp	r3, #254	; 0xfe
 8000fba:	d001      	beq.n	8000fc0 <SD_Read_Block+0x60>
			return 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e01b      	b.n	8000ff8 <SD_Read_Block+0x98>

		/* receive data */
		do {
			SPI_RxBytePtr(hsd, datablock++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 f8f5 	bl	80011b8 <SPI_RxBytePtr>
		} while (len--);
 8000fce:	8afb      	ldrh	r3, [r7, #22]
 8000fd0:	1e5a      	subs	r2, r3, #1
 8000fd2:	82fa      	strh	r2, [r7, #22]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f3      	bne.n	8000fc0 <SD_Read_Block+0x60>

		/* discard CRC */
		SPI_RxByte(hsd);
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f000 f8ce 	bl	800117a <SPI_RxByte>
		SPI_RxByte(hsd);
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f8cb 	bl	800117a <SPI_RxByte>

		SD_Deselect(hsd);
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 f880 	bl	80010ea <SD_Deselect>
		SPI_RxByte(hsd);
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f000 f8c5 	bl	800117a <SPI_RxByte>
		SPI_RxByte(hsd);
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f000 f8c2 	bl	800117a <SPI_RxByte>
		return 1;
 8000ff6:	2301      	movs	r3, #1
	}

}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000b0 	.word	0x200000b0

08001004 <SD_SendCmd>:
/**
 * @brief this function sends cmd to SDC
 * @param cmd to send
 * @return response from cd
 */
uint8_t SD_SendCmd(SD_HandleTypeDef *hsd, uint8_t cmd, uint32_t arg) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	460b      	mov	r3, r1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	72fb      	strb	r3, [r7, #11]
	//DONE?
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait(hsd, 1000) != 0xFF)
 8001012:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f8de 	bl	80011d8 <SD_ReadyWait>
 800101c:	4603      	mov	r3, r0
 800101e:	2bff      	cmp	r3, #255	; 0xff
 8001020:	d001      	beq.n	8001026 <SD_SendCmd+0x22>
		return 0xFF;
 8001022:	23ff      	movs	r3, #255	; 0xff
 8001024:	e04a      	b.n	80010bc <SD_SendCmd+0xb8>

	/* transmit command */
	SPI_TxByte(hsd, cmd); /* Command */
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	4619      	mov	r1, r3
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f870 	bl	8001110 <SPI_TxByte>
	SPI_TxByte(hsd, (uint8_t) (arg >> 24)); /* Argument[31..24] */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0e1b      	lsrs	r3, r3, #24
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4619      	mov	r1, r3
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 f869 	bl	8001110 <SPI_TxByte>
	SPI_TxByte(hsd, (uint8_t) (arg >> 16)); /* Argument[23..16] */
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	0c1b      	lsrs	r3, r3, #16
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4619      	mov	r1, r3
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 f862 	bl	8001110 <SPI_TxByte>
	SPI_TxByte(hsd, (uint8_t) (arg >> 8)); /* Argument[15..8] */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4619      	mov	r1, r3
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 f85b 	bl	8001110 <SPI_TxByte>
	SPI_TxByte(hsd, (uint8_t) arg); /* Argument[7..0] */
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f855 	bl	8001110 <SPI_TxByte>

	/* prepare CRC */
	if (cmd == CMD0)
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	2b40      	cmp	r3, #64	; 0x40
 800106a:	d102      	bne.n	8001072 <SD_SendCmd+0x6e>
		crc = 0x95; /* CRC for CMD0(0) */
 800106c:	2395      	movs	r3, #149	; 0x95
 800106e:	75fb      	strb	r3, [r7, #23]
 8001070:	e007      	b.n	8001082 <SD_SendCmd+0x7e>
	else if (cmd == CMD8)
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	2b48      	cmp	r3, #72	; 0x48
 8001076:	d102      	bne.n	800107e <SD_SendCmd+0x7a>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001078:	2387      	movs	r3, #135	; 0x87
 800107a:	75fb      	strb	r3, [r7, #23]
 800107c:	e001      	b.n	8001082 <SD_SendCmd+0x7e>
	else
		crc = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	75fb      	strb	r3, [r7, #23]

	/* transmit CRC */
	SPI_TxByte(hsd, crc);
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	4619      	mov	r1, r3
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f842 	bl	8001110 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12)
 800108c:	7afb      	ldrb	r3, [r7, #11]
 800108e:	2b4c      	cmp	r3, #76	; 0x4c
 8001090:	d102      	bne.n	8001098 <SD_SendCmd+0x94>
		SPI_RxByte(hsd);
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f871 	bl	800117a <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001098:	230a      	movs	r3, #10
 800109a:	75bb      	strb	r3, [r7, #22]
	do {
		res = SPI_RxByte(hsd);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 f86c 	bl	800117a <SPI_RxByte>
 80010a2:	4603      	mov	r3, r0
 80010a4:	757b      	strb	r3, [r7, #21]
	} while ((res & 0x80) && --n);
 80010a6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da05      	bge.n	80010ba <SD_SendCmd+0xb6>
 80010ae:	7dbb      	ldrb	r3, [r7, #22]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	75bb      	strb	r3, [r7, #22]
 80010b4:	7dbb      	ldrb	r3, [r7, #22]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <SD_SendCmd+0x98>

	return res;
 80010ba:	7d7b      	ldrb	r3, [r7, #21]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <SD_Select>:
/*****************************************************************************/
void SD_Select(SD_HandleTypeDef *hsd) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hsd->CS_Port, hsd->CS_Pin, GPIO_PIN_RESET);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6858      	ldr	r0, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	891b      	ldrh	r3, [r3, #8]
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	f000 ff56 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 fc77 	bl	80019d0 <HAL_Delay>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <SD_Deselect>:
void SD_Deselect(SD_HandleTypeDef *hsd) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hsd->CS_Port, hsd->CS_Pin, GPIO_PIN_SET);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6858      	ldr	r0, [r3, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	891b      	ldrh	r3, [r3, #8]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	f000 ff43 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 fc64 	bl	80019d0 <HAL_Delay>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <SPI_TxByte>:
static void SPI_TxByte(SD_HandleTypeDef *hsd, uint8_t data) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
	//DONE?
	while (!__HAL_SPI_GET_FLAG(hsd->hspi, SPI_FLAG_TXE))
 800111c:	bf00      	nop
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b02      	cmp	r3, #2
 800112c:	d1f7      	bne.n	800111e <SPI_TxByte+0xe>
		;
	HAL_SPI_Transmit(hsd->hspi, &data, 1, SPI_TIMEOUT);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	1cf9      	adds	r1, r7, #3
 8001134:	2364      	movs	r3, #100	; 0x64
 8001136:	2201      	movs	r2, #1
 8001138:	f001 fbed 	bl	8002916 <HAL_SPI_Transmit>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <SPI_TxBuffer>:
static void SPI_TxBuffer(SD_HandleTypeDef *hsd, void *buffer, uint16_t len) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	4613      	mov	r3, r2
 8001150:	80fb      	strh	r3, [r7, #6]
	//DONE?
	while (!__HAL_SPI_GET_FLAG(hsd->hspi, SPI_FLAG_TXE))
 8001152:	bf00      	nop
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b02      	cmp	r3, #2
 8001162:	d1f7      	bne.n	8001154 <SPI_TxBuffer+0x10>
		;
	HAL_SPI_Transmit(hsd->hspi, buffer, len, SPI_TIMEOUT);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	88fa      	ldrh	r2, [r7, #6]
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	f001 fbd2 	bl	8002916 <HAL_SPI_Transmit>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <SPI_RxByte>:
static uint8_t SPI_RxByte(SD_HandleTypeDef *hsd) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af02      	add	r7, sp, #8
 8001180:	6078      	str	r0, [r7, #4]
	//DONE?
	uint8_t dummy, data;
	dummy = 0xFF;
 8001182:	23ff      	movs	r3, #255	; 0xff
 8001184:	73fb      	strb	r3, [r7, #15]

	while (!__HAL_SPI_GET_FLAG(hsd->hspi, SPI_FLAG_TXE))
 8001186:	bf00      	nop
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b02      	cmp	r3, #2
 8001196:	d1f7      	bne.n	8001188 <SPI_RxByte+0xe>
		;
	HAL_SPI_TransmitReceive(hsd->hspi, &dummy, &data, 1, SPI_TIMEOUT);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 020e 	add.w	r2, r7, #14
 80011a0:	f107 010f 	add.w	r1, r7, #15
 80011a4:	2364      	movs	r3, #100	; 0x64
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	f001 fcf0 	bl	8002b8e <HAL_SPI_TransmitReceive>

	return data;
 80011ae:	7bbb      	ldrb	r3, [r7, #14]

}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <SPI_RxBytePtr>:
static void SPI_RxBytePtr(SD_HandleTypeDef *hsd, uint8_t *buff) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	//DONE?
	*buff = SPI_RxByte(hsd);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffd9 	bl	800117a <SPI_RxByte>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	701a      	strb	r2, [r3, #0]
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <SD_ReadyWait>:
static uint8_t SD_ReadyWait(SD_HandleTypeDef *hsd, uint32_t timeout) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	//DONE?
	uint8_t res;

	/* timeout 500ms */
	timer2 = timeout;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	4a09      	ldr	r2, [pc, #36]	; (800120c <SD_ReadyWait+0x34>)
 80011e6:	6013      	str	r3, [r2, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte(hsd);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffc6 	bl	800117a <SPI_RxByte>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]
	} while ((res != 0xFF) && (timer2 <= 0));
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2bff      	cmp	r3, #255	; 0xff
 80011f6:	d003      	beq.n	8001200 <SD_ReadyWait+0x28>
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <SD_ReadyWait+0x34>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	ddf3      	ble.n	80011e8 <SD_ReadyWait+0x10>

	return res;
 8001200:	7bfb      	ldrb	r3, [r7, #15]

}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200000b4 	.word	0x200000b4

08001210 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_SPI1_Init+0x64>)
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <MX_SPI1_Init+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_SPI1_Init+0x64>)
 800121c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_SPI1_Init+0x64>)
 8001230:	2202      	movs	r2, #2
 8001232:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_SPI1_Init+0x64>)
 8001236:	2201      	movs	r2, #1
 8001238:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_SPI1_Init+0x64>)
 800123c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001240:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_SPI1_Init+0x64>)
 800125c:	220a      	movs	r2, #10
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_SPI1_Init+0x64>)
 8001262:	f001 facf 	bl	8002804 <HAL_SPI_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800126c:	f7ff fc28 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200052e4 	.word	0x200052e4
 8001278:	40013000 	.word	0x40013000

0800127c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_SPI3_Init+0x64>)
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MX_SPI3_Init+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_SPI3_Init+0x64>)
 8001288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_SPI3_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_SPI3_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_SPI3_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_SPI3_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_SPI3_Init+0x64>)
 80012a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_SPI3_Init+0x64>)
 80012b0:	2228      	movs	r2, #40	; 0x28
 80012b2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_SPI3_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_SPI3_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_SPI3_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_SPI3_Init+0x64>)
 80012c8:	220a      	movs	r2, #10
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_SPI3_Init+0x64>)
 80012ce:	f001 fa99 	bl	8002804 <HAL_SPI_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80012d8:	f7ff fbf2 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000533c 	.word	0x2000533c
 80012e4:	40003c00 	.word	0x40003c00

080012e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a36      	ldr	r2, [pc, #216]	; (80013e0 <HAL_SPI_MspInit+0xf8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d134      	bne.n	8001374 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a34      	ldr	r2, [pc, #208]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 8001314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001342:	23f0      	movs	r3, #240	; 0xf0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001352:	2305      	movs	r3, #5
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <HAL_SPI_MspInit+0x100>)
 800135e:	f000 fc8f 	bl	8001c80 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2023      	movs	r0, #35	; 0x23
 8001368:	f000 fc31 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800136c:	2023      	movs	r0, #35	; 0x23
 800136e:	f000 fc4a 	bl	8001c06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001372:	e030      	b.n	80013d6 <HAL_SPI_MspInit+0xee>
  else if(spiHandle->Instance==SPI3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <HAL_SPI_MspInit+0x104>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12b      	bne.n	80013d6 <HAL_SPI_MspInit+0xee>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 8001388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_SPI_MspInit+0xfc>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013b6:	2338      	movs	r3, #56	; 0x38
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013c6:	2306      	movs	r3, #6
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4807      	ldr	r0, [pc, #28]	; (80013f0 <HAL_SPI_MspInit+0x108>)
 80013d2:	f000 fc55 	bl	8001c80 <HAL_GPIO_Init>
}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	; 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40013000 	.word	0x40013000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40003c00 	.word	0x40003c00
 80013f0:	40020400 	.word	0x40020400

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_MspInit+0x4c>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_MspInit+0x4c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	timer2--;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SysTick_Handler+0x20>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <SysTick_Handler+0x20>)
 8001498:	6013      	str	r3, [r2, #0]
	timer1--;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Handler+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <SysTick_Handler+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 fa74 	bl	8001990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200000b4 	.word	0x200000b4
 80014b0:	200000b0 	.word	0x200000b0

080014b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014ba:	f002 f8a5 	bl	8003608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200053e0 	.word	0x200053e0

080014c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <SPI1_IRQHandler+0x10>)
 80014ce:	f001 fd01 	bl	8002ed4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200052e4 	.word	0x200052e4

080014dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	return 1;
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_kill>:

int _kill(int pid, int sig)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014f6:	f002 fd4b 	bl	8003f90 <__errno>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2216      	movs	r2, #22
 80014fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_exit>:

void _exit (int status)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffe7 	bl	80014ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800151e:	e7fe      	b.n	800151e <_exit+0x12>

08001520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e00a      	b.n	8001548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001532:	f3af 8000 	nop.w
 8001536:	4601      	mov	r1, r0
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	b2ca      	uxtb	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf0      	blt.n	8001532 <_read+0x12>
	}

return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e009      	b.n	8001580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf1      	blt.n	800156c <_write+0x12>
	}
	return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_close>:

int _close(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
	return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ba:	605a      	str	r2, [r3, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_isatty>:

int _isatty(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	return 1;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f002 fcb0 	bl	8003f90 <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20010000 	.word	0x20010000
 800165c:	00000400 	.word	0x00000400
 8001660:	20005394 	.word	0x20005394
 8001664:	20005440 	.word	0x20005440

08001668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ae:	4b27      	ldr	r3, [pc, #156]	; (800174c <MX_TIM2_Init+0xc0>)
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <MX_TIM2_Init+0xc0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <MX_TIM2_Init+0xc0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_TIM2_Init+0xc0>)
 80016c4:	22ff      	movs	r2, #255	; 0xff
 80016c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_TIM2_Init+0xc0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_TIM2_Init+0xc0>)
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d4:	481d      	ldr	r0, [pc, #116]	; (800174c <MX_TIM2_Init+0xc0>)
 80016d6:	f001 fe97 	bl	8003408 <HAL_TIM_PWM_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80016e0:	f7ff f9ee 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	4619      	mov	r1, r3
 80016f2:	4816      	ldr	r0, [pc, #88]	; (800174c <MX_TIM2_Init+0xc0>)
 80016f4:	f002 fbac 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80016fe:	f7ff f9df 	bl	8000ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001702:	2360      	movs	r3, #96	; 0x60
 8001704:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800170e:	2304      	movs	r3, #4
 8001710:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2204      	movs	r2, #4
 8001716:	4619      	mov	r1, r3
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <MX_TIM2_Init+0xc0>)
 800171a:	f002 f87d 	bl	8003818 <HAL_TIM_PWM_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001724:	f7ff f9cc 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2208      	movs	r2, #8
 800172c:	4619      	mov	r1, r3
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_TIM2_Init+0xc0>)
 8001730:	f002 f872 	bl	8003818 <HAL_TIM_PWM_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800173a:	f7ff f9c1 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800173e:	4803      	ldr	r0, [pc, #12]	; (800174c <MX_TIM2_Init+0xc0>)
 8001740:	f000 f872 	bl	8001828 <HAL_TIM_MspPostInit>

}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20005398 	.word	0x20005398

08001750 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_TIM10_Init+0x40>)
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <MX_TIM10_Init+0x44>)
 8001758:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <MX_TIM10_Init+0x40>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_TIM10_Init+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1904;
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <MX_TIM10_Init+0x40>)
 8001768:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 800176c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_TIM10_Init+0x40>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_TIM10_Init+0x40>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_TIM10_Init+0x40>)
 800177c:	f001 fd92 	bl	80032a4 <HAL_TIM_Base_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001786:	f7ff f99b 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200053e0 	.word	0x200053e0
 8001794:	40014400 	.word	0x40014400

08001798 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a8:	d10d      	bne.n	80017c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_TIM_Base_MspInit+0x48>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d115      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_TIM_Base_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_TIM_Base_MspInit+0x4c>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_TIM_Base_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2019      	movs	r0, #25
 800180c:	f000 f9df 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001810:	2019      	movs	r0, #25
 8001812:	f000 f9f8 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40014400 	.word	0x40014400
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d11d      	bne.n	8001886 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_TIM_MspPostInit+0x68>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_TIM_MspPostInit+0x68>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_TIM_MspPostInit+0x68>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SPK_L_Pin|SPK_R_Pin;
 8001866:	2306      	movs	r3, #6
 8001868:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001876:	2301      	movs	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4619      	mov	r1, r3
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 8001882:	f000 f9fd 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000

08001898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800189e:	490e      	ldr	r1, [pc, #56]	; (80018d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b4:	4c0b      	ldr	r4, [pc, #44]	; (80018e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c2:	f7ff fed1 	bl	8001668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c6:	f002 fb7b 	bl	8003fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ca:	f7fe feeb 	bl	80006a4 <main>
  bx  lr    
 80018ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018dc:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 80018e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018e4:	2000543c 	.word	0x2000543c

080018e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_Init+0x40>)
 80018f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_Init+0x40>)
 8001902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_Init+0x40>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 f94f 	bl	8001bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191a:	200f      	movs	r0, #15
 800191c:	f000 f808 	bl	8001930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001920:	f7ff fd68 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00

08001930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x54>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x58>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001946:	fbb3 f3f1 	udiv	r3, r3, r1
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f967 	bl	8001c22 <HAL_SYSTICK_Config>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e00e      	b.n	800197c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d80a      	bhi.n	800197a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800196c:	f000 f92f 	bl	8001bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <HAL_InitTick+0x5c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000000 	.word	0x20000000
 8001988:	20000008 	.word	0x20000008
 800198c:	20000004 	.word	0x20000004

08001990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x20>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x24>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_IncTick+0x24>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20005428 	.word	0x20005428

080019b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_GetTick+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20005428 	.word	0x20005428

080019d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff ffee 	bl	80019b8 <HAL_GetTick>
 80019dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019e8:	d005      	beq.n	80019f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_Delay+0x44>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f6:	bf00      	nop
 80019f8:	f7ff ffde 	bl	80019b8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d8f7      	bhi.n	80019f8 <HAL_Delay+0x28>
  {
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db0b      	blt.n	8001aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <__NVIC_EnableIRQ+0x38>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	; (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f1c3 0307 	rsb	r3, r3, #7
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	bf28      	it	cs
 8001b2a:	2304      	movcs	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d902      	bls.n	8001b3c <NVIC_EncodePriority+0x30>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b03      	subs	r3, #3
 8001b3a:	e000      	b.n	8001b3e <NVIC_EncodePriority+0x32>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	4313      	orrs	r3, r2
         );
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b84:	d301      	bcc.n	8001b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00f      	b.n	8001baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <SysTick_Config+0x40>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b92:	210f      	movs	r1, #15
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b98:	f7ff ff8e 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <SysTick_Config+0x40>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <SysTick_Config+0x40>)
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	e000e010 	.word	0xe000e010

08001bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff29 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be0:	f7ff ff3e 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7ff ff8e 	bl	8001b0c <NVIC_EncodePriority>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff5d 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff31 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffa2 	bl	8001b74 <SysTick_Config>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d004      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e00c      	b.n	8001c72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e159      	b.n	8001f50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 8148 	bne.w	8001f4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d005      	beq.n	8001cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d130      	bne.n	8001d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0201 	and.w	r2, r3, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d017      	beq.n	8001d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d123      	bne.n	8001dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	69b9      	ldr	r1, [r7, #24]
 8001dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a2 	beq.w	8001f4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a56      	ldr	r2, [pc, #344]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b54      	ldr	r3, [pc, #336]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_GPIO_Init+0x2ec>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a49      	ldr	r2, [pc, #292]	; (8001f70 <HAL_GPIO_Init+0x2f0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d019      	beq.n	8001e82 <HAL_GPIO_Init+0x202>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a48      	ldr	r2, [pc, #288]	; (8001f74 <HAL_GPIO_Init+0x2f4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_GPIO_Init+0x1fe>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a47      	ldr	r2, [pc, #284]	; (8001f78 <HAL_GPIO_Init+0x2f8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00d      	beq.n	8001e7a <HAL_GPIO_Init+0x1fa>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a46      	ldr	r2, [pc, #280]	; (8001f7c <HAL_GPIO_Init+0x2fc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <HAL_GPIO_Init+0x1f6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <HAL_GPIO_Init+0x300>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_GPIO_Init+0x1f2>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e72:	2307      	movs	r3, #7
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e82:	2300      	movs	r3, #0
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e94:	4935      	ldr	r1, [pc, #212]	; (8001f6c <HAL_GPIO_Init+0x2ec>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec6:	4a2f      	ldr	r2, [pc, #188]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef0:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f1a:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f44:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	f67f aea2 	bls.w	8001c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40013c00 	.word	0x40013c00

08001f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa4:	e003      	b.n	8001fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	041a      	lsls	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e267      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d075      	beq.n	80020c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fda:	4b88      	ldr	r3, [pc, #544]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00c      	beq.n	8002000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe6:	4b85      	ldr	r3, [pc, #532]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d112      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff2:	4b82      	ldr	r3, [pc, #520]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b7e      	ldr	r3, [pc, #504]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d05b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d157      	bne.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e242      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x74>
 8002022:	4b76      	ldr	r3, [pc, #472]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a75      	ldr	r2, [pc, #468]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x98>
 800203a:	4b70      	ldr	r3, [pc, #448]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6f      	ldr	r2, [pc, #444]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b6d      	ldr	r3, [pc, #436]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6c      	ldr	r2, [pc, #432]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002054:	4b69      	ldr	r3, [pc, #420]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a68      	ldr	r2, [pc, #416]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b66      	ldr	r3, [pc, #408]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a65      	ldr	r2, [pc, #404]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fca0 	bl	80019b8 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fc9c 	bl	80019b8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e207      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xc0>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff fc8c 	bl	80019b8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff fc88 	bl	80019b8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1f3      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b51      	ldr	r3, [pc, #324]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020d2:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1c7      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4937      	ldr	r1, [pc, #220]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b34      	ldr	r3, [pc, #208]	; (8002200 <HAL_RCC_OscConfig+0x244>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff fc41 	bl	80019b8 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff fc3d 	bl	80019b8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1a8      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4925      	ldr	r1, [pc, #148]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_OscConfig+0x244>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff fc20 	bl	80019b8 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff fc1c 	bl	80019b8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e187      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d036      	beq.n	8002214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_RCC_OscConfig+0x248>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff fc00 	bl	80019b8 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff fbfc 	bl	80019b8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e167      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x200>
 80021da:	e01b      	b.n	8002214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_OscConfig+0x248>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fbe9 	bl	80019b8 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	e00e      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff fbe5 	bl	80019b8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d907      	bls.n	8002208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e150      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
 80021fc:	40023800 	.word	0x40023800
 8002200:	42470000 	.word	0x42470000
 8002204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4b88      	ldr	r3, [pc, #544]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ea      	bne.n	80021ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8097 	beq.w	8002350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b81      	ldr	r3, [pc, #516]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10f      	bne.n	8002252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b7d      	ldr	r3, [pc, #500]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a7c      	ldr	r2, [pc, #496]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b7a      	ldr	r3, [pc, #488]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b77      	ldr	r3, [pc, #476]	; (8002430 <HAL_RCC_OscConfig+0x474>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	4b74      	ldr	r3, [pc, #464]	; (8002430 <HAL_RCC_OscConfig+0x474>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a73      	ldr	r2, [pc, #460]	; (8002430 <HAL_RCC_OscConfig+0x474>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7ff fba5 	bl	80019b8 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7ff fba1 	bl	80019b8 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e10c      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCC_OscConfig+0x474>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2ea>
 8002298:	4b64      	ldr	r3, [pc, #400]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a63      	ldr	r2, [pc, #396]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	e01c      	b.n	80022e0 <HAL_RCC_OscConfig+0x324>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x30c>
 80022ae:	4b5f      	ldr	r3, [pc, #380]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	4a5e      	ldr	r2, [pc, #376]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ba:	4b5c      	ldr	r3, [pc, #368]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	4a5b      	ldr	r2, [pc, #364]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6713      	str	r3, [r2, #112]	; 0x70
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0x324>
 80022c8:	4b58      	ldr	r3, [pc, #352]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	4a57      	ldr	r2, [pc, #348]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
 80022d4:	4b55      	ldr	r3, [pc, #340]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	4a54      	ldr	r2, [pc, #336]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022da:	f023 0304 	bic.w	r3, r3, #4
 80022de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7ff fb66 	bl	80019b8 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7ff fb62 	bl	80019b8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0cb      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ee      	beq.n	80022f0 <HAL_RCC_OscConfig+0x334>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7ff fb50 	bl	80019b8 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231a:	e00a      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7ff fb4c 	bl	80019b8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0b5      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002332:	4b3e      	ldr	r3, [pc, #248]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1ee      	bne.n	800231c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	4a38      	ldr	r2, [pc, #224]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800234a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a1 	beq.w	800249c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d05c      	beq.n	8002420 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d141      	bne.n	80023f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_OscConfig+0x478>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fb20 	bl	80019b8 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff fb1c 	bl	80019b8 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e087      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	019b      	lsls	r3, r3, #6
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	491b      	ldr	r1, [pc, #108]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x478>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff faf5 	bl	80019b8 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff faf1 	bl	80019b8 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e05c      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x416>
 80023f0:	e054      	b.n	800249c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_RCC_OscConfig+0x478>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff fade 	bl	80019b8 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002400:	f7ff fada 	bl	80019b8 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e045      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x444>
 800241e:	e03d      	b.n	800249c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e038      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
 800242c:	40023800 	.word	0x40023800
 8002430:	40007000 	.word	0x40007000
 8002434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x4ec>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d028      	beq.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d121      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d11a      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002468:	4013      	ands	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800246e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002470:	4293      	cmp	r3, r2
 8002472:	d111      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	3b01      	subs	r3, #1
 8002482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0cc      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d90c      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800250a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d044      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e067      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4934      	ldr	r1, [pc, #208]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7ff fa0c 	bl	80019b8 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7ff fa08 	bl	80019b8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e04f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20c      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f821 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490a      	ldr	r1, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f96c 	bl	8001930 <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	0800504c 	.word	0x0800504c
 8002670:	20000000 	.word	0x20000000
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b090      	sub	sp, #64	; 0x40
 800267e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
 8002684:	2300      	movs	r3, #0
 8002686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002688:	2300      	movs	r3, #0
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d00d      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x40>
 800269c:	2b08      	cmp	r3, #8
 800269e:	f200 80a1 	bhi.w	80027e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x34>
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026aa:	e09b      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_GetSysClockFreq+0x184>)
 80026ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026b0:	e09b      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b2:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_GetSysClockFreq+0x188>)
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026b6:	e098      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b8:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c2:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d028      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	2200      	movs	r2, #0
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	627a      	str	r2, [r7, #36]	; 0x24
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026e0:	2100      	movs	r1, #0
 80026e2:	4b47      	ldr	r3, [pc, #284]	; (8002800 <HAL_RCC_GetSysClockFreq+0x188>)
 80026e4:	fb03 f201 	mul.w	r2, r3, r1
 80026e8:	2300      	movs	r3, #0
 80026ea:	fb00 f303 	mul.w	r3, r0, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	4a43      	ldr	r2, [pc, #268]	; (8002800 <HAL_RCC_GetSysClockFreq+0x188>)
 80026f2:	fba0 1202 	umull	r1, r2, r0, r2
 80026f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f8:	460a      	mov	r2, r1
 80026fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80026fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fe:	4413      	add	r3, r2
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002704:	2200      	movs	r2, #0
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	61fa      	str	r2, [r7, #28]
 800270a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800270e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002712:	f7fd fdb5 	bl	8000280 <__aeabi_uldivmod>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4613      	mov	r3, r2
 800271c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271e:	e053      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	2200      	movs	r2, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	617a      	str	r2, [r7, #20]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002732:	f04f 0b00 	mov.w	fp, #0
 8002736:	4652      	mov	r2, sl
 8002738:	465b      	mov	r3, fp
 800273a:	f04f 0000 	mov.w	r0, #0
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	0159      	lsls	r1, r3, #5
 8002744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002748:	0150      	lsls	r0, r2, #5
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	ebb2 080a 	subs.w	r8, r2, sl
 8002752:	eb63 090b 	sbc.w	r9, r3, fp
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002762:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002766:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800276a:	ebb2 0408 	subs.w	r4, r2, r8
 800276e:	eb63 0509 	sbc.w	r5, r3, r9
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	00eb      	lsls	r3, r5, #3
 800277c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002780:	00e2      	lsls	r2, r4, #3
 8002782:	4614      	mov	r4, r2
 8002784:	461d      	mov	r5, r3
 8002786:	eb14 030a 	adds.w	r3, r4, sl
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	eb45 030b 	adc.w	r3, r5, fp
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b2:	2200      	movs	r2, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	60fa      	str	r2, [r7, #12]
 80027b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027bc:	f7fd fd60 	bl	8000280 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80027d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetSysClockFreq+0x184>)
 80027e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3740      	adds	r7, #64	; 0x40
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	017d7840 	.word	0x017d7840

08002804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e07b      	b.n	800290e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	2b00      	cmp	r3, #0
 800281c:	d108      	bne.n	8002830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002826:	d009      	beq.n	800283c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
 800282e:	e005      	b.n	800283c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fd46 	bl	80012e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	ea42 0103 	orr.w	r1, r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f003 0104 	and.w	r1, r3, #4
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	f003 0210 	and.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b088      	sub	sp, #32
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_SPI_Transmit+0x22>
 8002934:	2302      	movs	r3, #2
 8002936:	e126      	b.n	8002b86 <HAL_SPI_Transmit+0x270>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002940:	f7ff f83a 	bl	80019b8 <HAL_GetTick>
 8002944:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d002      	beq.n	800295c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002956:	2302      	movs	r3, #2
 8002958:	77fb      	strb	r3, [r7, #31]
    goto error;
 800295a:	e10b      	b.n	8002b74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_SPI_Transmit+0x52>
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800296c:	e102      	b.n	8002b74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	88fa      	ldrh	r2, [r7, #6]
 8002986:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	88fa      	ldrh	r2, [r7, #6]
 800298c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b4:	d10f      	bne.n	80029d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d007      	beq.n	80029f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029fc:	d14b      	bne.n	8002a96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_SPI_Transmit+0xf6>
 8002a06:	8afb      	ldrh	r3, [r7, #22]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d13e      	bne.n	8002a8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	1c9a      	adds	r2, r3, #2
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a30:	e02b      	b.n	8002a8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d112      	bne.n	8002a66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	1c9a      	adds	r2, r3, #2
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a64:	e011      	b.n	8002a8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a66:	f7fe ffa7 	bl	80019b8 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d803      	bhi.n	8002a7e <HAL_SPI_Transmit+0x168>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a7c:	d102      	bne.n	8002a84 <HAL_SPI_Transmit+0x16e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a88:	e074      	b.n	8002b74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ce      	bne.n	8002a32 <HAL_SPI_Transmit+0x11c>
 8002a94:	e04c      	b.n	8002b30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_SPI_Transmit+0x18e>
 8002a9e:	8afb      	ldrh	r3, [r7, #22]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d140      	bne.n	8002b26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aca:	e02c      	b.n	8002b26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d113      	bne.n	8002b02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	330c      	adds	r3, #12
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b00:	e011      	b.n	8002b26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b02:	f7fe ff59 	bl	80019b8 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d803      	bhi.n	8002b1a <HAL_SPI_Transmit+0x204>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b18:	d102      	bne.n	8002b20 <HAL_SPI_Transmit+0x20a>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b24:	e026      	b.n	8002b74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1cd      	bne.n	8002acc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fb73 	bl	8003220 <SPI_EndRxTxTransaction>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e000      	b.n	8002b74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b08c      	sub	sp, #48	; 0x30
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x26>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e18a      	b.n	8002eca <HAL_SPI_TransmitReceive+0x33c>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bbc:	f7fe fefc 	bl	80019b8 <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d00f      	beq.n	8002bfe <HAL_SPI_TransmitReceive+0x70>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be4:	d107      	bne.n	8002bf6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_SPI_TransmitReceive+0x68>
 8002bee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d003      	beq.n	8002bfe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bfc:	e15b      	b.n	8002eb6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0x82>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0x82>
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c16:	e14e      	b.n	8002eb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d003      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2205      	movs	r2, #5
 8002c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	887a      	ldrh	r2, [r7, #2]
 8002c42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	887a      	ldrh	r2, [r7, #2]
 8002c4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d007      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c88:	d178      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x10a>
 8002c92:	8b7b      	ldrh	r3, [r7, #26]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d166      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	881a      	ldrh	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	1c9a      	adds	r2, r3, #2
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cbc:	e053      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d11b      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x176>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x176>
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d113      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	881a      	ldrh	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	1c9a      	adds	r2, r3, #2
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d119      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x1b8>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d014      	beq.n	8002d46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	b292      	uxth	r2, r2
 8002d28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	1c9a      	adds	r2, r3, #2
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d42:	2301      	movs	r3, #1
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d46:	f7fe fe37 	bl	80019b8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d807      	bhi.n	8002d66 <HAL_SPI_TransmitReceive+0x1d8>
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d5c:	d003      	beq.n	8002d66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d64:	e0a7      	b.n	8002eb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1a6      	bne.n	8002cbe <HAL_SPI_TransmitReceive+0x130>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1a1      	bne.n	8002cbe <HAL_SPI_TransmitReceive+0x130>
 8002d7a:	e07c      	b.n	8002e76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_SPI_TransmitReceive+0x1fc>
 8002d84:	8b7b      	ldrh	r3, [r7, #26]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d16b      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	330c      	adds	r3, #12
 8002d94:	7812      	ldrb	r2, [r2, #0]
 8002d96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002db0:	e057      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d11c      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x26c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d017      	beq.n	8002dfa <HAL_SPI_TransmitReceive+0x26c>
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d114      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	7812      	ldrb	r2, [r2, #0]
 8002ddc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d119      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x2ae>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d014      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e3c:	f7fe fdbc 	bl	80019b8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d803      	bhi.n	8002e54 <HAL_SPI_TransmitReceive+0x2c6>
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e52:	d102      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x2cc>
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e60:	e029      	b.n	8002eb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1a2      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x224>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d19d      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f9d0 	bl	8003220 <SPI_EndRxTxTransaction>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e92:	e010      	b.n	8002eb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	e000      	b.n	8002eb6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002eb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3730      	adds	r7, #48	; 0x30
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10f      	bne.n	8002f18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
    return;
 8002f16:	e0d7      	b.n	80030c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_SPI_IRQHandler+0x66>
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	09db      	lsrs	r3, r3, #7
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4798      	blx	r3
    return;
 8002f38:	e0c6      	b.n	80030c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <HAL_SPI_IRQHandler+0x8c>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80b4 	beq.w	80030c8 <HAL_SPI_IRQHandler+0x1f4>
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80ad 	beq.w	80030c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d023      	beq.n	8002fc2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d011      	beq.n	8002faa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	e00b      	b.n	8002fc2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]
        return;
 8002fc0:	e082      	b.n	80030c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d014      	beq.n	8002ff8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00c      	beq.n	800301e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	f043 0208 	orr.w	r2, r3, #8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	2b00      	cmp	r3, #0
 8003024:	d04f      	beq.n	80030c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003034:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <HAL_SPI_IRQHandler+0x17e>
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d034      	beq.n	80030bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0203 	bic.w	r2, r2, #3
 8003060:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d011      	beq.n	800308e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <HAL_SPI_IRQHandler+0x1fc>)
 8003070:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fddf 	bl	8001c3a <HAL_DMA_Abort_IT>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309a:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <HAL_SPI_IRQHandler+0x1fc>)
 800309c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fdc9 	bl	8001c3a <HAL_DMA_Abort_IT>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80030ba:	e003      	b.n	80030c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f809 	bl	80030d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80030c2:	e000      	b.n	80030c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80030c4:	bf00      	nop
    return;
 80030c6:	bf00      	nop
  }
}
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	080030e9 	.word	0x080030e9

080030d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff ffe6 	bl	80030d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003120:	f7fe fc4a 	bl	80019b8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	4413      	add	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003130:	f7fe fc42 	bl	80019b8 <HAL_GetTick>
 8003134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003136:	4b39      	ldr	r3, [pc, #228]	; (800321c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	015b      	lsls	r3, r3, #5
 800313c:	0d1b      	lsrs	r3, r3, #20
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003146:	e054      	b.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800314e:	d050      	beq.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003150:	f7fe fc32 	bl	80019b8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	429a      	cmp	r2, r3
 800315e:	d902      	bls.n	8003166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d13d      	bne.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317e:	d111      	bne.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003188:	d004      	beq.n	8003194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003192:	d107      	bne.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ac:	d10f      	bne.n	80031ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e017      	b.n	8003212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d19b      	bne.n	8003148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000000 	.word	0x20000000

08003220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <SPI_EndRxTxTransaction+0x7c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <SPI_EndRxTxTransaction+0x80>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0d5b      	lsrs	r3, r3, #21
 8003238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324a:	d112      	bne.n	8003272 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7ff ff5a 	bl	8003110 <SPI_WaitFlagStateUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e00f      	b.n	8003292 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3b01      	subs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d0f2      	beq.n	8003272 <SPI_EndRxTxTransaction+0x52>
 800328c:	e000      	b.n	8003290 <SPI_EndRxTxTransaction+0x70>
        break;
 800328e:	bf00      	nop
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000000 	.word	0x20000000
 80032a0:	165e9f81 	.word	0x165e9f81

080032a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e041      	b.n	800333a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe fa84 	bl	80017d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 fb82 	bl	80039ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d001      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e044      	b.n	80033e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d018      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x6c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d013      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00e      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a19      	ldr	r2, [pc, #100]	; (80033fc <HAL_TIM_Base_Start_IT+0xb8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d009      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x6c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <HAL_TIM_Base_Start_IT+0xbc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x6c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a16      	ldr	r2, [pc, #88]	; (8003404 <HAL_TIM_Base_Start_IT+0xc0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d111      	bne.n	80033d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d010      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	e007      	b.n	80033e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800
 8003400:	40000c00 	.word	0x40000c00
 8003404:	40014000 	.word	0x40014000

08003408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e041      	b.n	800349e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe f9b2 	bl	8001798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f000 fad0 	bl	80039ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_TIM_PWM_Start+0x24>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e022      	b.n	8003512 <HAL_TIM_PWM_Start+0x6a>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d109      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x3e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e015      	b.n	8003512 <HAL_TIM_PWM_Start+0x6a>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d109      	bne.n	8003500 <HAL_TIM_PWM_Start+0x58>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e008      	b.n	8003512 <HAL_TIM_PWM_Start+0x6a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e068      	b.n	80035ec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0x82>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003528:	e013      	b.n	8003552 <HAL_TIM_PWM_Start+0xaa>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b04      	cmp	r3, #4
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0x92>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003538:	e00b      	b.n	8003552 <HAL_TIM_PWM_Start+0xaa>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b08      	cmp	r3, #8
 800353e:	d104      	bne.n	800354a <HAL_TIM_PWM_Start+0xa2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003548:	e003      	b.n	8003552 <HAL_TIM_PWM_Start+0xaa>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2201      	movs	r2, #1
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fc52 	bl	8003e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <HAL_TIM_PWM_Start+0x14c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d107      	bne.n	800357a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_TIM_PWM_Start+0x14c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d018      	beq.n	80035b6 <HAL_TIM_PWM_Start+0x10e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d013      	beq.n	80035b6 <HAL_TIM_PWM_Start+0x10e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <HAL_TIM_PWM_Start+0x150>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <HAL_TIM_PWM_Start+0x10e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_TIM_PWM_Start+0x154>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_TIM_PWM_Start+0x10e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a16      	ldr	r2, [pc, #88]	; (8003600 <HAL_TIM_PWM_Start+0x158>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_TIM_PWM_Start+0x10e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a14      	ldr	r2, [pc, #80]	; (8003604 <HAL_TIM_PWM_Start+0x15c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d111      	bne.n	80035da <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b06      	cmp	r3, #6
 80035c6:	d010      	beq.n	80035ea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d8:	e007      	b.n	80035ea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40000c00 	.word	0x40000c00
 8003604:	40014000 	.word	0x40014000

08003608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b02      	cmp	r3, #2
 800361c:	d122      	bne.n	8003664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b02      	cmp	r3, #2
 800362a:	d11b      	bne.n	8003664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0202 	mvn.w	r2, #2
 8003634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f9b0 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f9a2 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f9b3 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0204 	mvn.w	r2, #4
 8003688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f986 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f978 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f989 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0208 	mvn.w	r2, #8
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2204      	movs	r2, #4
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f95c 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f94e 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f95f 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b10      	cmp	r3, #16
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b10      	cmp	r3, #16
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0210 	mvn.w	r2, #16
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2208      	movs	r2, #8
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f932 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f924 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f935 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d10e      	bne.n	800378c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0201 	mvn.w	r2, #1
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd f944 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d10e      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b80      	cmp	r3, #128	; 0x80
 80037a6:	d107      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fbc4 	bl	8003f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d10e      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d107      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f8fa 	bl	80039d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d10e      	bne.n	8003810 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d107      	bne.n	8003810 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0220 	mvn.w	r2, #32
 8003808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fb8e 	bl	8003f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003832:	2302      	movs	r3, #2
 8003834:	e0ae      	b.n	8003994 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b0c      	cmp	r3, #12
 8003842:	f200 809f 	bhi.w	8003984 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003846:	a201      	add	r2, pc, #4	; (adr r2, 800384c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384c:	08003881 	.word	0x08003881
 8003850:	08003985 	.word	0x08003985
 8003854:	08003985 	.word	0x08003985
 8003858:	08003985 	.word	0x08003985
 800385c:	080038c1 	.word	0x080038c1
 8003860:	08003985 	.word	0x08003985
 8003864:	08003985 	.word	0x08003985
 8003868:	08003985 	.word	0x08003985
 800386c:	08003903 	.word	0x08003903
 8003870:	08003985 	.word	0x08003985
 8003874:	08003985 	.word	0x08003985
 8003878:	08003985 	.word	0x08003985
 800387c:	08003943 	.word	0x08003943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f930 	bl	8003aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0208 	orr.w	r2, r2, #8
 800389a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0204 	bic.w	r2, r2, #4
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	619a      	str	r2, [r3, #24]
      break;
 80038be:	e064      	b.n	800398a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f976 	bl	8003bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6999      	ldr	r1, [r3, #24]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	021a      	lsls	r2, r3, #8
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	619a      	str	r2, [r3, #24]
      break;
 8003900:	e043      	b.n	800398a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f9c1 	bl	8003c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0208 	orr.w	r2, r2, #8
 800391c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0204 	bic.w	r2, r2, #4
 800392c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69d9      	ldr	r1, [r3, #28]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	61da      	str	r2, [r3, #28]
      break;
 8003940:	e023      	b.n	800398a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fa0b 	bl	8003d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800395c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69d9      	ldr	r1, [r3, #28]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	021a      	lsls	r2, r3, #8
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	61da      	str	r2, [r3, #28]
      break;
 8003982:	e002      	b.n	800398a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
      break;
 8003988:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003992:	7dfb      	ldrb	r3, [r7, #23]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a34      	ldr	r2, [pc, #208]	; (8003ad0 <TIM_Base_SetConfig+0xe4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00f      	beq.n	8003a24 <TIM_Base_SetConfig+0x38>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0a:	d00b      	beq.n	8003a24 <TIM_Base_SetConfig+0x38>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a31      	ldr	r2, [pc, #196]	; (8003ad4 <TIM_Base_SetConfig+0xe8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_Base_SetConfig+0x38>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <TIM_Base_SetConfig+0xec>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_Base_SetConfig+0x38>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <TIM_Base_SetConfig+0xf0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d108      	bne.n	8003a36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <TIM_Base_SetConfig+0xe4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01b      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a44:	d017      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <TIM_Base_SetConfig+0xe8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <TIM_Base_SetConfig+0xec>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00f      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <TIM_Base_SetConfig+0xf0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00b      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <TIM_Base_SetConfig+0xf4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d007      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <TIM_Base_SetConfig+0xf8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <TIM_Base_SetConfig+0xfc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d108      	bne.n	8003a88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <TIM_Base_SetConfig+0xe4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d103      	bne.n	8003abc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	615a      	str	r2, [r3, #20]
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400
 8003ae8:	40014800 	.word	0x40014800

08003aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f023 0201 	bic.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f023 0302 	bic.w	r3, r3, #2
 8003b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <TIM_OC1_SetConfig+0xc8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10c      	bne.n	8003b62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0308 	bic.w	r3, r3, #8
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <TIM_OC1_SetConfig+0xc8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d111      	bne.n	8003b8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40010000 	.word	0x40010000

08003bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f023 0210 	bic.w	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0320 	bic.w	r3, r3, #32
 8003c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <TIM_OC2_SetConfig+0xd4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10d      	bne.n	8003c34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <TIM_OC2_SetConfig+0xd4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d113      	bne.n	8003c64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000

08003c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <TIM_OC3_SetConfig+0xd0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10d      	bne.n	8003d0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <TIM_OC3_SetConfig+0xd0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d113      	bne.n	8003d3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40010000 	.word	0x40010000

08003d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	031b      	lsls	r3, r3, #12
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <TIM_OC4_SetConfig+0x9c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d109      	bne.n	8003dd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000

08003e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2201      	movs	r2, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e050      	b.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d013      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10c      	bne.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40000c00 	.word	0x40000c00
 8003f28:	40014000 	.word	0x40014000

08003f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <__assert_func>:
 8003f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f56:	4614      	mov	r4, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <__assert_func+0x2c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4605      	mov	r5, r0
 8003f60:	68d8      	ldr	r0, [r3, #12]
 8003f62:	b14c      	cbz	r4, 8003f78 <__assert_func+0x24>
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <__assert_func+0x30>)
 8003f66:	9100      	str	r1, [sp, #0]
 8003f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f6c:	4906      	ldr	r1, [pc, #24]	; (8003f88 <__assert_func+0x34>)
 8003f6e:	462b      	mov	r3, r5
 8003f70:	f000 f814 	bl	8003f9c <fiprintf>
 8003f74:	f000 fbfe 	bl	8004774 <abort>
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <__assert_func+0x38>)
 8003f7a:	461c      	mov	r4, r3
 8003f7c:	e7f3      	b.n	8003f66 <__assert_func+0x12>
 8003f7e:	bf00      	nop
 8003f80:	2000000c 	.word	0x2000000c
 8003f84:	0800505c 	.word	0x0800505c
 8003f88:	08005069 	.word	0x08005069
 8003f8c:	08005097 	.word	0x08005097

08003f90 <__errno>:
 8003f90:	4b01      	ldr	r3, [pc, #4]	; (8003f98 <__errno+0x8>)
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	2000000c 	.word	0x2000000c

08003f9c <fiprintf>:
 8003f9c:	b40e      	push	{r1, r2, r3}
 8003f9e:	b503      	push	{r0, r1, lr}
 8003fa0:	4601      	mov	r1, r0
 8003fa2:	ab03      	add	r3, sp, #12
 8003fa4:	4805      	ldr	r0, [pc, #20]	; (8003fbc <fiprintf+0x20>)
 8003fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003faa:	6800      	ldr	r0, [r0, #0]
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	f000 f85d 	bl	800406c <_vfiprintf_r>
 8003fb2:	b002      	add	sp, #8
 8003fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fb8:	b003      	add	sp, #12
 8003fba:	4770      	bx	lr
 8003fbc:	2000000c 	.word	0x2000000c

08003fc0 <__libc_init_array>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	4d0d      	ldr	r5, [pc, #52]	; (8003ff8 <__libc_init_array+0x38>)
 8003fc4:	4c0d      	ldr	r4, [pc, #52]	; (8003ffc <__libc_init_array+0x3c>)
 8003fc6:	1b64      	subs	r4, r4, r5
 8003fc8:	10a4      	asrs	r4, r4, #2
 8003fca:	2600      	movs	r6, #0
 8003fcc:	42a6      	cmp	r6, r4
 8003fce:	d109      	bne.n	8003fe4 <__libc_init_array+0x24>
 8003fd0:	4d0b      	ldr	r5, [pc, #44]	; (8004000 <__libc_init_array+0x40>)
 8003fd2:	4c0c      	ldr	r4, [pc, #48]	; (8004004 <__libc_init_array+0x44>)
 8003fd4:	f000 ffe2 	bl	8004f9c <_init>
 8003fd8:	1b64      	subs	r4, r4, r5
 8003fda:	10a4      	asrs	r4, r4, #2
 8003fdc:	2600      	movs	r6, #0
 8003fde:	42a6      	cmp	r6, r4
 8003fe0:	d105      	bne.n	8003fee <__libc_init_array+0x2e>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe8:	4798      	blx	r3
 8003fea:	3601      	adds	r6, #1
 8003fec:	e7ee      	b.n	8003fcc <__libc_init_array+0xc>
 8003fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff2:	4798      	blx	r3
 8003ff4:	3601      	adds	r6, #1
 8003ff6:	e7f2      	b.n	8003fde <__libc_init_array+0x1e>
 8003ff8:	08005138 	.word	0x08005138
 8003ffc:	08005138 	.word	0x08005138
 8004000:	08005138 	.word	0x08005138
 8004004:	0800513c 	.word	0x0800513c

08004008 <memset>:
 8004008:	4402      	add	r2, r0
 800400a:	4603      	mov	r3, r0
 800400c:	4293      	cmp	r3, r2
 800400e:	d100      	bne.n	8004012 <memset+0xa>
 8004010:	4770      	bx	lr
 8004012:	f803 1b01 	strb.w	r1, [r3], #1
 8004016:	e7f9      	b.n	800400c <memset+0x4>

08004018 <__sfputc_r>:
 8004018:	6893      	ldr	r3, [r2, #8]
 800401a:	3b01      	subs	r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	b410      	push	{r4}
 8004020:	6093      	str	r3, [r2, #8]
 8004022:	da08      	bge.n	8004036 <__sfputc_r+0x1e>
 8004024:	6994      	ldr	r4, [r2, #24]
 8004026:	42a3      	cmp	r3, r4
 8004028:	db01      	blt.n	800402e <__sfputc_r+0x16>
 800402a:	290a      	cmp	r1, #10
 800402c:	d103      	bne.n	8004036 <__sfputc_r+0x1e>
 800402e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004032:	f000 badf 	b.w	80045f4 <__swbuf_r>
 8004036:	6813      	ldr	r3, [r2, #0]
 8004038:	1c58      	adds	r0, r3, #1
 800403a:	6010      	str	r0, [r2, #0]
 800403c:	7019      	strb	r1, [r3, #0]
 800403e:	4608      	mov	r0, r1
 8004040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004044:	4770      	bx	lr

08004046 <__sfputs_r>:
 8004046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004048:	4606      	mov	r6, r0
 800404a:	460f      	mov	r7, r1
 800404c:	4614      	mov	r4, r2
 800404e:	18d5      	adds	r5, r2, r3
 8004050:	42ac      	cmp	r4, r5
 8004052:	d101      	bne.n	8004058 <__sfputs_r+0x12>
 8004054:	2000      	movs	r0, #0
 8004056:	e007      	b.n	8004068 <__sfputs_r+0x22>
 8004058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405c:	463a      	mov	r2, r7
 800405e:	4630      	mov	r0, r6
 8004060:	f7ff ffda 	bl	8004018 <__sfputc_r>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d1f3      	bne.n	8004050 <__sfputs_r+0xa>
 8004068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800406c <_vfiprintf_r>:
 800406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004070:	460d      	mov	r5, r1
 8004072:	b09d      	sub	sp, #116	; 0x74
 8004074:	4614      	mov	r4, r2
 8004076:	4698      	mov	r8, r3
 8004078:	4606      	mov	r6, r0
 800407a:	b118      	cbz	r0, 8004084 <_vfiprintf_r+0x18>
 800407c:	6983      	ldr	r3, [r0, #24]
 800407e:	b90b      	cbnz	r3, 8004084 <_vfiprintf_r+0x18>
 8004080:	f000 fc9a 	bl	80049b8 <__sinit>
 8004084:	4b89      	ldr	r3, [pc, #548]	; (80042ac <_vfiprintf_r+0x240>)
 8004086:	429d      	cmp	r5, r3
 8004088:	d11b      	bne.n	80040c2 <_vfiprintf_r+0x56>
 800408a:	6875      	ldr	r5, [r6, #4]
 800408c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800408e:	07d9      	lsls	r1, r3, #31
 8004090:	d405      	bmi.n	800409e <_vfiprintf_r+0x32>
 8004092:	89ab      	ldrh	r3, [r5, #12]
 8004094:	059a      	lsls	r2, r3, #22
 8004096:	d402      	bmi.n	800409e <_vfiprintf_r+0x32>
 8004098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800409a:	f000 fd2b 	bl	8004af4 <__retarget_lock_acquire_recursive>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	071b      	lsls	r3, r3, #28
 80040a2:	d501      	bpl.n	80040a8 <_vfiprintf_r+0x3c>
 80040a4:	692b      	ldr	r3, [r5, #16]
 80040a6:	b9eb      	cbnz	r3, 80040e4 <_vfiprintf_r+0x78>
 80040a8:	4629      	mov	r1, r5
 80040aa:	4630      	mov	r0, r6
 80040ac:	f000 faf4 	bl	8004698 <__swsetup_r>
 80040b0:	b1c0      	cbz	r0, 80040e4 <_vfiprintf_r+0x78>
 80040b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040b4:	07dc      	lsls	r4, r3, #31
 80040b6:	d50e      	bpl.n	80040d6 <_vfiprintf_r+0x6a>
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040bc:	b01d      	add	sp, #116	; 0x74
 80040be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c2:	4b7b      	ldr	r3, [pc, #492]	; (80042b0 <_vfiprintf_r+0x244>)
 80040c4:	429d      	cmp	r5, r3
 80040c6:	d101      	bne.n	80040cc <_vfiprintf_r+0x60>
 80040c8:	68b5      	ldr	r5, [r6, #8]
 80040ca:	e7df      	b.n	800408c <_vfiprintf_r+0x20>
 80040cc:	4b79      	ldr	r3, [pc, #484]	; (80042b4 <_vfiprintf_r+0x248>)
 80040ce:	429d      	cmp	r5, r3
 80040d0:	bf08      	it	eq
 80040d2:	68f5      	ldreq	r5, [r6, #12]
 80040d4:	e7da      	b.n	800408c <_vfiprintf_r+0x20>
 80040d6:	89ab      	ldrh	r3, [r5, #12]
 80040d8:	0598      	lsls	r0, r3, #22
 80040da:	d4ed      	bmi.n	80040b8 <_vfiprintf_r+0x4c>
 80040dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040de:	f000 fd0a 	bl	8004af6 <__retarget_lock_release_recursive>
 80040e2:	e7e9      	b.n	80040b8 <_vfiprintf_r+0x4c>
 80040e4:	2300      	movs	r3, #0
 80040e6:	9309      	str	r3, [sp, #36]	; 0x24
 80040e8:	2320      	movs	r3, #32
 80040ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f2:	2330      	movs	r3, #48	; 0x30
 80040f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042b8 <_vfiprintf_r+0x24c>
 80040f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040fc:	f04f 0901 	mov.w	r9, #1
 8004100:	4623      	mov	r3, r4
 8004102:	469a      	mov	sl, r3
 8004104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004108:	b10a      	cbz	r2, 800410e <_vfiprintf_r+0xa2>
 800410a:	2a25      	cmp	r2, #37	; 0x25
 800410c:	d1f9      	bne.n	8004102 <_vfiprintf_r+0x96>
 800410e:	ebba 0b04 	subs.w	fp, sl, r4
 8004112:	d00b      	beq.n	800412c <_vfiprintf_r+0xc0>
 8004114:	465b      	mov	r3, fp
 8004116:	4622      	mov	r2, r4
 8004118:	4629      	mov	r1, r5
 800411a:	4630      	mov	r0, r6
 800411c:	f7ff ff93 	bl	8004046 <__sfputs_r>
 8004120:	3001      	adds	r0, #1
 8004122:	f000 80aa 	beq.w	800427a <_vfiprintf_r+0x20e>
 8004126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004128:	445a      	add	r2, fp
 800412a:	9209      	str	r2, [sp, #36]	; 0x24
 800412c:	f89a 3000 	ldrb.w	r3, [sl]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80a2 	beq.w	800427a <_vfiprintf_r+0x20e>
 8004136:	2300      	movs	r3, #0
 8004138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800413c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004140:	f10a 0a01 	add.w	sl, sl, #1
 8004144:	9304      	str	r3, [sp, #16]
 8004146:	9307      	str	r3, [sp, #28]
 8004148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800414c:	931a      	str	r3, [sp, #104]	; 0x68
 800414e:	4654      	mov	r4, sl
 8004150:	2205      	movs	r2, #5
 8004152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004156:	4858      	ldr	r0, [pc, #352]	; (80042b8 <_vfiprintf_r+0x24c>)
 8004158:	f7fc f842 	bl	80001e0 <memchr>
 800415c:	9a04      	ldr	r2, [sp, #16]
 800415e:	b9d8      	cbnz	r0, 8004198 <_vfiprintf_r+0x12c>
 8004160:	06d1      	lsls	r1, r2, #27
 8004162:	bf44      	itt	mi
 8004164:	2320      	movmi	r3, #32
 8004166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800416a:	0713      	lsls	r3, r2, #28
 800416c:	bf44      	itt	mi
 800416e:	232b      	movmi	r3, #43	; 0x2b
 8004170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004174:	f89a 3000 	ldrb.w	r3, [sl]
 8004178:	2b2a      	cmp	r3, #42	; 0x2a
 800417a:	d015      	beq.n	80041a8 <_vfiprintf_r+0x13c>
 800417c:	9a07      	ldr	r2, [sp, #28]
 800417e:	4654      	mov	r4, sl
 8004180:	2000      	movs	r0, #0
 8004182:	f04f 0c0a 	mov.w	ip, #10
 8004186:	4621      	mov	r1, r4
 8004188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800418c:	3b30      	subs	r3, #48	; 0x30
 800418e:	2b09      	cmp	r3, #9
 8004190:	d94e      	bls.n	8004230 <_vfiprintf_r+0x1c4>
 8004192:	b1b0      	cbz	r0, 80041c2 <_vfiprintf_r+0x156>
 8004194:	9207      	str	r2, [sp, #28]
 8004196:	e014      	b.n	80041c2 <_vfiprintf_r+0x156>
 8004198:	eba0 0308 	sub.w	r3, r0, r8
 800419c:	fa09 f303 	lsl.w	r3, r9, r3
 80041a0:	4313      	orrs	r3, r2
 80041a2:	9304      	str	r3, [sp, #16]
 80041a4:	46a2      	mov	sl, r4
 80041a6:	e7d2      	b.n	800414e <_vfiprintf_r+0xe2>
 80041a8:	9b03      	ldr	r3, [sp, #12]
 80041aa:	1d19      	adds	r1, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	9103      	str	r1, [sp, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bfbb      	ittet	lt
 80041b4:	425b      	neglt	r3, r3
 80041b6:	f042 0202 	orrlt.w	r2, r2, #2
 80041ba:	9307      	strge	r3, [sp, #28]
 80041bc:	9307      	strlt	r3, [sp, #28]
 80041be:	bfb8      	it	lt
 80041c0:	9204      	strlt	r2, [sp, #16]
 80041c2:	7823      	ldrb	r3, [r4, #0]
 80041c4:	2b2e      	cmp	r3, #46	; 0x2e
 80041c6:	d10c      	bne.n	80041e2 <_vfiprintf_r+0x176>
 80041c8:	7863      	ldrb	r3, [r4, #1]
 80041ca:	2b2a      	cmp	r3, #42	; 0x2a
 80041cc:	d135      	bne.n	800423a <_vfiprintf_r+0x1ce>
 80041ce:	9b03      	ldr	r3, [sp, #12]
 80041d0:	1d1a      	adds	r2, r3, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	9203      	str	r2, [sp, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bfb8      	it	lt
 80041da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041de:	3402      	adds	r4, #2
 80041e0:	9305      	str	r3, [sp, #20]
 80041e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042c8 <_vfiprintf_r+0x25c>
 80041e6:	7821      	ldrb	r1, [r4, #0]
 80041e8:	2203      	movs	r2, #3
 80041ea:	4650      	mov	r0, sl
 80041ec:	f7fb fff8 	bl	80001e0 <memchr>
 80041f0:	b140      	cbz	r0, 8004204 <_vfiprintf_r+0x198>
 80041f2:	2340      	movs	r3, #64	; 0x40
 80041f4:	eba0 000a 	sub.w	r0, r0, sl
 80041f8:	fa03 f000 	lsl.w	r0, r3, r0
 80041fc:	9b04      	ldr	r3, [sp, #16]
 80041fe:	4303      	orrs	r3, r0
 8004200:	3401      	adds	r4, #1
 8004202:	9304      	str	r3, [sp, #16]
 8004204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004208:	482c      	ldr	r0, [pc, #176]	; (80042bc <_vfiprintf_r+0x250>)
 800420a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800420e:	2206      	movs	r2, #6
 8004210:	f7fb ffe6 	bl	80001e0 <memchr>
 8004214:	2800      	cmp	r0, #0
 8004216:	d03f      	beq.n	8004298 <_vfiprintf_r+0x22c>
 8004218:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <_vfiprintf_r+0x254>)
 800421a:	bb1b      	cbnz	r3, 8004264 <_vfiprintf_r+0x1f8>
 800421c:	9b03      	ldr	r3, [sp, #12]
 800421e:	3307      	adds	r3, #7
 8004220:	f023 0307 	bic.w	r3, r3, #7
 8004224:	3308      	adds	r3, #8
 8004226:	9303      	str	r3, [sp, #12]
 8004228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422a:	443b      	add	r3, r7
 800422c:	9309      	str	r3, [sp, #36]	; 0x24
 800422e:	e767      	b.n	8004100 <_vfiprintf_r+0x94>
 8004230:	fb0c 3202 	mla	r2, ip, r2, r3
 8004234:	460c      	mov	r4, r1
 8004236:	2001      	movs	r0, #1
 8004238:	e7a5      	b.n	8004186 <_vfiprintf_r+0x11a>
 800423a:	2300      	movs	r3, #0
 800423c:	3401      	adds	r4, #1
 800423e:	9305      	str	r3, [sp, #20]
 8004240:	4619      	mov	r1, r3
 8004242:	f04f 0c0a 	mov.w	ip, #10
 8004246:	4620      	mov	r0, r4
 8004248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800424c:	3a30      	subs	r2, #48	; 0x30
 800424e:	2a09      	cmp	r2, #9
 8004250:	d903      	bls.n	800425a <_vfiprintf_r+0x1ee>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0c5      	beq.n	80041e2 <_vfiprintf_r+0x176>
 8004256:	9105      	str	r1, [sp, #20]
 8004258:	e7c3      	b.n	80041e2 <_vfiprintf_r+0x176>
 800425a:	fb0c 2101 	mla	r1, ip, r1, r2
 800425e:	4604      	mov	r4, r0
 8004260:	2301      	movs	r3, #1
 8004262:	e7f0      	b.n	8004246 <_vfiprintf_r+0x1da>
 8004264:	ab03      	add	r3, sp, #12
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	462a      	mov	r2, r5
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <_vfiprintf_r+0x258>)
 800426c:	a904      	add	r1, sp, #16
 800426e:	4630      	mov	r0, r6
 8004270:	f3af 8000 	nop.w
 8004274:	4607      	mov	r7, r0
 8004276:	1c78      	adds	r0, r7, #1
 8004278:	d1d6      	bne.n	8004228 <_vfiprintf_r+0x1bc>
 800427a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800427c:	07d9      	lsls	r1, r3, #31
 800427e:	d405      	bmi.n	800428c <_vfiprintf_r+0x220>
 8004280:	89ab      	ldrh	r3, [r5, #12]
 8004282:	059a      	lsls	r2, r3, #22
 8004284:	d402      	bmi.n	800428c <_vfiprintf_r+0x220>
 8004286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004288:	f000 fc35 	bl	8004af6 <__retarget_lock_release_recursive>
 800428c:	89ab      	ldrh	r3, [r5, #12]
 800428e:	065b      	lsls	r3, r3, #25
 8004290:	f53f af12 	bmi.w	80040b8 <_vfiprintf_r+0x4c>
 8004294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004296:	e711      	b.n	80040bc <_vfiprintf_r+0x50>
 8004298:	ab03      	add	r3, sp, #12
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	462a      	mov	r2, r5
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <_vfiprintf_r+0x258>)
 80042a0:	a904      	add	r1, sp, #16
 80042a2:	4630      	mov	r0, r6
 80042a4:	f000 f880 	bl	80043a8 <_printf_i>
 80042a8:	e7e4      	b.n	8004274 <_vfiprintf_r+0x208>
 80042aa:	bf00      	nop
 80042ac:	080050f0 	.word	0x080050f0
 80042b0:	08005110 	.word	0x08005110
 80042b4:	080050d0 	.word	0x080050d0
 80042b8:	0800509c 	.word	0x0800509c
 80042bc:	080050a6 	.word	0x080050a6
 80042c0:	00000000 	.word	0x00000000
 80042c4:	08004047 	.word	0x08004047
 80042c8:	080050a2 	.word	0x080050a2

080042cc <_printf_common>:
 80042cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	4616      	mov	r6, r2
 80042d2:	4699      	mov	r9, r3
 80042d4:	688a      	ldr	r2, [r1, #8]
 80042d6:	690b      	ldr	r3, [r1, #16]
 80042d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042dc:	4293      	cmp	r3, r2
 80042de:	bfb8      	it	lt
 80042e0:	4613      	movlt	r3, r2
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042e8:	4607      	mov	r7, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	b10a      	cbz	r2, 80042f2 <_printf_common+0x26>
 80042ee:	3301      	adds	r3, #1
 80042f0:	6033      	str	r3, [r6, #0]
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	0699      	lsls	r1, r3, #26
 80042f6:	bf42      	ittt	mi
 80042f8:	6833      	ldrmi	r3, [r6, #0]
 80042fa:	3302      	addmi	r3, #2
 80042fc:	6033      	strmi	r3, [r6, #0]
 80042fe:	6825      	ldr	r5, [r4, #0]
 8004300:	f015 0506 	ands.w	r5, r5, #6
 8004304:	d106      	bne.n	8004314 <_printf_common+0x48>
 8004306:	f104 0a19 	add.w	sl, r4, #25
 800430a:	68e3      	ldr	r3, [r4, #12]
 800430c:	6832      	ldr	r2, [r6, #0]
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	42ab      	cmp	r3, r5
 8004312:	dc26      	bgt.n	8004362 <_printf_common+0x96>
 8004314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004318:	1e13      	subs	r3, r2, #0
 800431a:	6822      	ldr	r2, [r4, #0]
 800431c:	bf18      	it	ne
 800431e:	2301      	movne	r3, #1
 8004320:	0692      	lsls	r2, r2, #26
 8004322:	d42b      	bmi.n	800437c <_printf_common+0xb0>
 8004324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004328:	4649      	mov	r1, r9
 800432a:	4638      	mov	r0, r7
 800432c:	47c0      	blx	r8
 800432e:	3001      	adds	r0, #1
 8004330:	d01e      	beq.n	8004370 <_printf_common+0xa4>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	68e5      	ldr	r5, [r4, #12]
 8004336:	6832      	ldr	r2, [r6, #0]
 8004338:	f003 0306 	and.w	r3, r3, #6
 800433c:	2b04      	cmp	r3, #4
 800433e:	bf08      	it	eq
 8004340:	1aad      	subeq	r5, r5, r2
 8004342:	68a3      	ldr	r3, [r4, #8]
 8004344:	6922      	ldr	r2, [r4, #16]
 8004346:	bf0c      	ite	eq
 8004348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800434c:	2500      	movne	r5, #0
 800434e:	4293      	cmp	r3, r2
 8004350:	bfc4      	itt	gt
 8004352:	1a9b      	subgt	r3, r3, r2
 8004354:	18ed      	addgt	r5, r5, r3
 8004356:	2600      	movs	r6, #0
 8004358:	341a      	adds	r4, #26
 800435a:	42b5      	cmp	r5, r6
 800435c:	d11a      	bne.n	8004394 <_printf_common+0xc8>
 800435e:	2000      	movs	r0, #0
 8004360:	e008      	b.n	8004374 <_printf_common+0xa8>
 8004362:	2301      	movs	r3, #1
 8004364:	4652      	mov	r2, sl
 8004366:	4649      	mov	r1, r9
 8004368:	4638      	mov	r0, r7
 800436a:	47c0      	blx	r8
 800436c:	3001      	adds	r0, #1
 800436e:	d103      	bne.n	8004378 <_printf_common+0xac>
 8004370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004378:	3501      	adds	r5, #1
 800437a:	e7c6      	b.n	800430a <_printf_common+0x3e>
 800437c:	18e1      	adds	r1, r4, r3
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	2030      	movs	r0, #48	; 0x30
 8004382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004386:	4422      	add	r2, r4
 8004388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800438c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004390:	3302      	adds	r3, #2
 8004392:	e7c7      	b.n	8004324 <_printf_common+0x58>
 8004394:	2301      	movs	r3, #1
 8004396:	4622      	mov	r2, r4
 8004398:	4649      	mov	r1, r9
 800439a:	4638      	mov	r0, r7
 800439c:	47c0      	blx	r8
 800439e:	3001      	adds	r0, #1
 80043a0:	d0e6      	beq.n	8004370 <_printf_common+0xa4>
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7d9      	b.n	800435a <_printf_common+0x8e>
	...

080043a8 <_printf_i>:
 80043a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043ac:	7e0f      	ldrb	r7, [r1, #24]
 80043ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043b0:	2f78      	cmp	r7, #120	; 0x78
 80043b2:	4691      	mov	r9, r2
 80043b4:	4680      	mov	r8, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	469a      	mov	sl, r3
 80043ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043be:	d807      	bhi.n	80043d0 <_printf_i+0x28>
 80043c0:	2f62      	cmp	r7, #98	; 0x62
 80043c2:	d80a      	bhi.n	80043da <_printf_i+0x32>
 80043c4:	2f00      	cmp	r7, #0
 80043c6:	f000 80d8 	beq.w	800457a <_printf_i+0x1d2>
 80043ca:	2f58      	cmp	r7, #88	; 0x58
 80043cc:	f000 80a3 	beq.w	8004516 <_printf_i+0x16e>
 80043d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043d8:	e03a      	b.n	8004450 <_printf_i+0xa8>
 80043da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043de:	2b15      	cmp	r3, #21
 80043e0:	d8f6      	bhi.n	80043d0 <_printf_i+0x28>
 80043e2:	a101      	add	r1, pc, #4	; (adr r1, 80043e8 <_printf_i+0x40>)
 80043e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043e8:	08004441 	.word	0x08004441
 80043ec:	08004455 	.word	0x08004455
 80043f0:	080043d1 	.word	0x080043d1
 80043f4:	080043d1 	.word	0x080043d1
 80043f8:	080043d1 	.word	0x080043d1
 80043fc:	080043d1 	.word	0x080043d1
 8004400:	08004455 	.word	0x08004455
 8004404:	080043d1 	.word	0x080043d1
 8004408:	080043d1 	.word	0x080043d1
 800440c:	080043d1 	.word	0x080043d1
 8004410:	080043d1 	.word	0x080043d1
 8004414:	08004561 	.word	0x08004561
 8004418:	08004485 	.word	0x08004485
 800441c:	08004543 	.word	0x08004543
 8004420:	080043d1 	.word	0x080043d1
 8004424:	080043d1 	.word	0x080043d1
 8004428:	08004583 	.word	0x08004583
 800442c:	080043d1 	.word	0x080043d1
 8004430:	08004485 	.word	0x08004485
 8004434:	080043d1 	.word	0x080043d1
 8004438:	080043d1 	.word	0x080043d1
 800443c:	0800454b 	.word	0x0800454b
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	1d1a      	adds	r2, r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	602a      	str	r2, [r5, #0]
 8004448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800444c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004450:	2301      	movs	r3, #1
 8004452:	e0a3      	b.n	800459c <_printf_i+0x1f4>
 8004454:	6820      	ldr	r0, [r4, #0]
 8004456:	6829      	ldr	r1, [r5, #0]
 8004458:	0606      	lsls	r6, r0, #24
 800445a:	f101 0304 	add.w	r3, r1, #4
 800445e:	d50a      	bpl.n	8004476 <_printf_i+0xce>
 8004460:	680e      	ldr	r6, [r1, #0]
 8004462:	602b      	str	r3, [r5, #0]
 8004464:	2e00      	cmp	r6, #0
 8004466:	da03      	bge.n	8004470 <_printf_i+0xc8>
 8004468:	232d      	movs	r3, #45	; 0x2d
 800446a:	4276      	negs	r6, r6
 800446c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004470:	485e      	ldr	r0, [pc, #376]	; (80045ec <_printf_i+0x244>)
 8004472:	230a      	movs	r3, #10
 8004474:	e019      	b.n	80044aa <_printf_i+0x102>
 8004476:	680e      	ldr	r6, [r1, #0]
 8004478:	602b      	str	r3, [r5, #0]
 800447a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800447e:	bf18      	it	ne
 8004480:	b236      	sxthne	r6, r6
 8004482:	e7ef      	b.n	8004464 <_printf_i+0xbc>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	6820      	ldr	r0, [r4, #0]
 8004488:	1d19      	adds	r1, r3, #4
 800448a:	6029      	str	r1, [r5, #0]
 800448c:	0601      	lsls	r1, r0, #24
 800448e:	d501      	bpl.n	8004494 <_printf_i+0xec>
 8004490:	681e      	ldr	r6, [r3, #0]
 8004492:	e002      	b.n	800449a <_printf_i+0xf2>
 8004494:	0646      	lsls	r6, r0, #25
 8004496:	d5fb      	bpl.n	8004490 <_printf_i+0xe8>
 8004498:	881e      	ldrh	r6, [r3, #0]
 800449a:	4854      	ldr	r0, [pc, #336]	; (80045ec <_printf_i+0x244>)
 800449c:	2f6f      	cmp	r7, #111	; 0x6f
 800449e:	bf0c      	ite	eq
 80044a0:	2308      	moveq	r3, #8
 80044a2:	230a      	movne	r3, #10
 80044a4:	2100      	movs	r1, #0
 80044a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044aa:	6865      	ldr	r5, [r4, #4]
 80044ac:	60a5      	str	r5, [r4, #8]
 80044ae:	2d00      	cmp	r5, #0
 80044b0:	bfa2      	ittt	ge
 80044b2:	6821      	ldrge	r1, [r4, #0]
 80044b4:	f021 0104 	bicge.w	r1, r1, #4
 80044b8:	6021      	strge	r1, [r4, #0]
 80044ba:	b90e      	cbnz	r6, 80044c0 <_printf_i+0x118>
 80044bc:	2d00      	cmp	r5, #0
 80044be:	d04d      	beq.n	800455c <_printf_i+0x1b4>
 80044c0:	4615      	mov	r5, r2
 80044c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80044c6:	fb03 6711 	mls	r7, r3, r1, r6
 80044ca:	5dc7      	ldrb	r7, [r0, r7]
 80044cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044d0:	4637      	mov	r7, r6
 80044d2:	42bb      	cmp	r3, r7
 80044d4:	460e      	mov	r6, r1
 80044d6:	d9f4      	bls.n	80044c2 <_printf_i+0x11a>
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d10b      	bne.n	80044f4 <_printf_i+0x14c>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	07de      	lsls	r6, r3, #31
 80044e0:	d508      	bpl.n	80044f4 <_printf_i+0x14c>
 80044e2:	6923      	ldr	r3, [r4, #16]
 80044e4:	6861      	ldr	r1, [r4, #4]
 80044e6:	4299      	cmp	r1, r3
 80044e8:	bfde      	ittt	le
 80044ea:	2330      	movle	r3, #48	; 0x30
 80044ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80044f4:	1b52      	subs	r2, r2, r5
 80044f6:	6122      	str	r2, [r4, #16]
 80044f8:	f8cd a000 	str.w	sl, [sp]
 80044fc:	464b      	mov	r3, r9
 80044fe:	aa03      	add	r2, sp, #12
 8004500:	4621      	mov	r1, r4
 8004502:	4640      	mov	r0, r8
 8004504:	f7ff fee2 	bl	80042cc <_printf_common>
 8004508:	3001      	adds	r0, #1
 800450a:	d14c      	bne.n	80045a6 <_printf_i+0x1fe>
 800450c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004510:	b004      	add	sp, #16
 8004512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004516:	4835      	ldr	r0, [pc, #212]	; (80045ec <_printf_i+0x244>)
 8004518:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800451c:	6829      	ldr	r1, [r5, #0]
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	f851 6b04 	ldr.w	r6, [r1], #4
 8004524:	6029      	str	r1, [r5, #0]
 8004526:	061d      	lsls	r5, r3, #24
 8004528:	d514      	bpl.n	8004554 <_printf_i+0x1ac>
 800452a:	07df      	lsls	r7, r3, #31
 800452c:	bf44      	itt	mi
 800452e:	f043 0320 	orrmi.w	r3, r3, #32
 8004532:	6023      	strmi	r3, [r4, #0]
 8004534:	b91e      	cbnz	r6, 800453e <_printf_i+0x196>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	f023 0320 	bic.w	r3, r3, #32
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	2310      	movs	r3, #16
 8004540:	e7b0      	b.n	80044a4 <_printf_i+0xfc>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	f043 0320 	orr.w	r3, r3, #32
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	2378      	movs	r3, #120	; 0x78
 800454c:	4828      	ldr	r0, [pc, #160]	; (80045f0 <_printf_i+0x248>)
 800454e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004552:	e7e3      	b.n	800451c <_printf_i+0x174>
 8004554:	0659      	lsls	r1, r3, #25
 8004556:	bf48      	it	mi
 8004558:	b2b6      	uxthmi	r6, r6
 800455a:	e7e6      	b.n	800452a <_printf_i+0x182>
 800455c:	4615      	mov	r5, r2
 800455e:	e7bb      	b.n	80044d8 <_printf_i+0x130>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	6826      	ldr	r6, [r4, #0]
 8004564:	6961      	ldr	r1, [r4, #20]
 8004566:	1d18      	adds	r0, r3, #4
 8004568:	6028      	str	r0, [r5, #0]
 800456a:	0635      	lsls	r5, r6, #24
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	d501      	bpl.n	8004574 <_printf_i+0x1cc>
 8004570:	6019      	str	r1, [r3, #0]
 8004572:	e002      	b.n	800457a <_printf_i+0x1d2>
 8004574:	0670      	lsls	r0, r6, #25
 8004576:	d5fb      	bpl.n	8004570 <_printf_i+0x1c8>
 8004578:	8019      	strh	r1, [r3, #0]
 800457a:	2300      	movs	r3, #0
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	4615      	mov	r5, r2
 8004580:	e7ba      	b.n	80044f8 <_printf_i+0x150>
 8004582:	682b      	ldr	r3, [r5, #0]
 8004584:	1d1a      	adds	r2, r3, #4
 8004586:	602a      	str	r2, [r5, #0]
 8004588:	681d      	ldr	r5, [r3, #0]
 800458a:	6862      	ldr	r2, [r4, #4]
 800458c:	2100      	movs	r1, #0
 800458e:	4628      	mov	r0, r5
 8004590:	f7fb fe26 	bl	80001e0 <memchr>
 8004594:	b108      	cbz	r0, 800459a <_printf_i+0x1f2>
 8004596:	1b40      	subs	r0, r0, r5
 8004598:	6060      	str	r0, [r4, #4]
 800459a:	6863      	ldr	r3, [r4, #4]
 800459c:	6123      	str	r3, [r4, #16]
 800459e:	2300      	movs	r3, #0
 80045a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a4:	e7a8      	b.n	80044f8 <_printf_i+0x150>
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	462a      	mov	r2, r5
 80045aa:	4649      	mov	r1, r9
 80045ac:	4640      	mov	r0, r8
 80045ae:	47d0      	blx	sl
 80045b0:	3001      	adds	r0, #1
 80045b2:	d0ab      	beq.n	800450c <_printf_i+0x164>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	079b      	lsls	r3, r3, #30
 80045b8:	d413      	bmi.n	80045e2 <_printf_i+0x23a>
 80045ba:	68e0      	ldr	r0, [r4, #12]
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	4298      	cmp	r0, r3
 80045c0:	bfb8      	it	lt
 80045c2:	4618      	movlt	r0, r3
 80045c4:	e7a4      	b.n	8004510 <_printf_i+0x168>
 80045c6:	2301      	movs	r3, #1
 80045c8:	4632      	mov	r2, r6
 80045ca:	4649      	mov	r1, r9
 80045cc:	4640      	mov	r0, r8
 80045ce:	47d0      	blx	sl
 80045d0:	3001      	adds	r0, #1
 80045d2:	d09b      	beq.n	800450c <_printf_i+0x164>
 80045d4:	3501      	adds	r5, #1
 80045d6:	68e3      	ldr	r3, [r4, #12]
 80045d8:	9903      	ldr	r1, [sp, #12]
 80045da:	1a5b      	subs	r3, r3, r1
 80045dc:	42ab      	cmp	r3, r5
 80045de:	dcf2      	bgt.n	80045c6 <_printf_i+0x21e>
 80045e0:	e7eb      	b.n	80045ba <_printf_i+0x212>
 80045e2:	2500      	movs	r5, #0
 80045e4:	f104 0619 	add.w	r6, r4, #25
 80045e8:	e7f5      	b.n	80045d6 <_printf_i+0x22e>
 80045ea:	bf00      	nop
 80045ec:	080050ad 	.word	0x080050ad
 80045f0:	080050be 	.word	0x080050be

080045f4 <__swbuf_r>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	460e      	mov	r6, r1
 80045f8:	4614      	mov	r4, r2
 80045fa:	4605      	mov	r5, r0
 80045fc:	b118      	cbz	r0, 8004606 <__swbuf_r+0x12>
 80045fe:	6983      	ldr	r3, [r0, #24]
 8004600:	b90b      	cbnz	r3, 8004606 <__swbuf_r+0x12>
 8004602:	f000 f9d9 	bl	80049b8 <__sinit>
 8004606:	4b21      	ldr	r3, [pc, #132]	; (800468c <__swbuf_r+0x98>)
 8004608:	429c      	cmp	r4, r3
 800460a:	d12b      	bne.n	8004664 <__swbuf_r+0x70>
 800460c:	686c      	ldr	r4, [r5, #4]
 800460e:	69a3      	ldr	r3, [r4, #24]
 8004610:	60a3      	str	r3, [r4, #8]
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	071a      	lsls	r2, r3, #28
 8004616:	d52f      	bpl.n	8004678 <__swbuf_r+0x84>
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	b36b      	cbz	r3, 8004678 <__swbuf_r+0x84>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	6820      	ldr	r0, [r4, #0]
 8004620:	1ac0      	subs	r0, r0, r3
 8004622:	6963      	ldr	r3, [r4, #20]
 8004624:	b2f6      	uxtb	r6, r6
 8004626:	4283      	cmp	r3, r0
 8004628:	4637      	mov	r7, r6
 800462a:	dc04      	bgt.n	8004636 <__swbuf_r+0x42>
 800462c:	4621      	mov	r1, r4
 800462e:	4628      	mov	r0, r5
 8004630:	f000 f92e 	bl	8004890 <_fflush_r>
 8004634:	bb30      	cbnz	r0, 8004684 <__swbuf_r+0x90>
 8004636:	68a3      	ldr	r3, [r4, #8]
 8004638:	3b01      	subs	r3, #1
 800463a:	60a3      	str	r3, [r4, #8]
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	6022      	str	r2, [r4, #0]
 8004642:	701e      	strb	r6, [r3, #0]
 8004644:	6963      	ldr	r3, [r4, #20]
 8004646:	3001      	adds	r0, #1
 8004648:	4283      	cmp	r3, r0
 800464a:	d004      	beq.n	8004656 <__swbuf_r+0x62>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	07db      	lsls	r3, r3, #31
 8004650:	d506      	bpl.n	8004660 <__swbuf_r+0x6c>
 8004652:	2e0a      	cmp	r6, #10
 8004654:	d104      	bne.n	8004660 <__swbuf_r+0x6c>
 8004656:	4621      	mov	r1, r4
 8004658:	4628      	mov	r0, r5
 800465a:	f000 f919 	bl	8004890 <_fflush_r>
 800465e:	b988      	cbnz	r0, 8004684 <__swbuf_r+0x90>
 8004660:	4638      	mov	r0, r7
 8004662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <__swbuf_r+0x9c>)
 8004666:	429c      	cmp	r4, r3
 8004668:	d101      	bne.n	800466e <__swbuf_r+0x7a>
 800466a:	68ac      	ldr	r4, [r5, #8]
 800466c:	e7cf      	b.n	800460e <__swbuf_r+0x1a>
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <__swbuf_r+0xa0>)
 8004670:	429c      	cmp	r4, r3
 8004672:	bf08      	it	eq
 8004674:	68ec      	ldreq	r4, [r5, #12]
 8004676:	e7ca      	b.n	800460e <__swbuf_r+0x1a>
 8004678:	4621      	mov	r1, r4
 800467a:	4628      	mov	r0, r5
 800467c:	f000 f80c 	bl	8004698 <__swsetup_r>
 8004680:	2800      	cmp	r0, #0
 8004682:	d0cb      	beq.n	800461c <__swbuf_r+0x28>
 8004684:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004688:	e7ea      	b.n	8004660 <__swbuf_r+0x6c>
 800468a:	bf00      	nop
 800468c:	080050f0 	.word	0x080050f0
 8004690:	08005110 	.word	0x08005110
 8004694:	080050d0 	.word	0x080050d0

08004698 <__swsetup_r>:
 8004698:	4b32      	ldr	r3, [pc, #200]	; (8004764 <__swsetup_r+0xcc>)
 800469a:	b570      	push	{r4, r5, r6, lr}
 800469c:	681d      	ldr	r5, [r3, #0]
 800469e:	4606      	mov	r6, r0
 80046a0:	460c      	mov	r4, r1
 80046a2:	b125      	cbz	r5, 80046ae <__swsetup_r+0x16>
 80046a4:	69ab      	ldr	r3, [r5, #24]
 80046a6:	b913      	cbnz	r3, 80046ae <__swsetup_r+0x16>
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f985 	bl	80049b8 <__sinit>
 80046ae:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <__swsetup_r+0xd0>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	d10f      	bne.n	80046d4 <__swsetup_r+0x3c>
 80046b4:	686c      	ldr	r4, [r5, #4]
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046bc:	0719      	lsls	r1, r3, #28
 80046be:	d42c      	bmi.n	800471a <__swsetup_r+0x82>
 80046c0:	06dd      	lsls	r5, r3, #27
 80046c2:	d411      	bmi.n	80046e8 <__swsetup_r+0x50>
 80046c4:	2309      	movs	r3, #9
 80046c6:	6033      	str	r3, [r6, #0]
 80046c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046d2:	e03e      	b.n	8004752 <__swsetup_r+0xba>
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <__swsetup_r+0xd4>)
 80046d6:	429c      	cmp	r4, r3
 80046d8:	d101      	bne.n	80046de <__swsetup_r+0x46>
 80046da:	68ac      	ldr	r4, [r5, #8]
 80046dc:	e7eb      	b.n	80046b6 <__swsetup_r+0x1e>
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <__swsetup_r+0xd8>)
 80046e0:	429c      	cmp	r4, r3
 80046e2:	bf08      	it	eq
 80046e4:	68ec      	ldreq	r4, [r5, #12]
 80046e6:	e7e6      	b.n	80046b6 <__swsetup_r+0x1e>
 80046e8:	0758      	lsls	r0, r3, #29
 80046ea:	d512      	bpl.n	8004712 <__swsetup_r+0x7a>
 80046ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ee:	b141      	cbz	r1, 8004702 <__swsetup_r+0x6a>
 80046f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046f4:	4299      	cmp	r1, r3
 80046f6:	d002      	beq.n	80046fe <__swsetup_r+0x66>
 80046f8:	4630      	mov	r0, r6
 80046fa:	f000 fa63 	bl	8004bc4 <_free_r>
 80046fe:	2300      	movs	r3, #0
 8004700:	6363      	str	r3, [r4, #52]	; 0x34
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	2300      	movs	r3, #0
 800470c:	6063      	str	r3, [r4, #4]
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	f043 0308 	orr.w	r3, r3, #8
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	b94b      	cbnz	r3, 8004732 <__swsetup_r+0x9a>
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004728:	d003      	beq.n	8004732 <__swsetup_r+0x9a>
 800472a:	4621      	mov	r1, r4
 800472c:	4630      	mov	r0, r6
 800472e:	f000 fa09 	bl	8004b44 <__smakebuf_r>
 8004732:	89a0      	ldrh	r0, [r4, #12]
 8004734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004738:	f010 0301 	ands.w	r3, r0, #1
 800473c:	d00a      	beq.n	8004754 <__swsetup_r+0xbc>
 800473e:	2300      	movs	r3, #0
 8004740:	60a3      	str	r3, [r4, #8]
 8004742:	6963      	ldr	r3, [r4, #20]
 8004744:	425b      	negs	r3, r3
 8004746:	61a3      	str	r3, [r4, #24]
 8004748:	6923      	ldr	r3, [r4, #16]
 800474a:	b943      	cbnz	r3, 800475e <__swsetup_r+0xc6>
 800474c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004750:	d1ba      	bne.n	80046c8 <__swsetup_r+0x30>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	0781      	lsls	r1, r0, #30
 8004756:	bf58      	it	pl
 8004758:	6963      	ldrpl	r3, [r4, #20]
 800475a:	60a3      	str	r3, [r4, #8]
 800475c:	e7f4      	b.n	8004748 <__swsetup_r+0xb0>
 800475e:	2000      	movs	r0, #0
 8004760:	e7f7      	b.n	8004752 <__swsetup_r+0xba>
 8004762:	bf00      	nop
 8004764:	2000000c 	.word	0x2000000c
 8004768:	080050f0 	.word	0x080050f0
 800476c:	08005110 	.word	0x08005110
 8004770:	080050d0 	.word	0x080050d0

08004774 <abort>:
 8004774:	b508      	push	{r3, lr}
 8004776:	2006      	movs	r0, #6
 8004778:	f000 fb3c 	bl	8004df4 <raise>
 800477c:	2001      	movs	r0, #1
 800477e:	f7fc fec5 	bl	800150c <_exit>
	...

08004784 <__sflush_r>:
 8004784:	898a      	ldrh	r2, [r1, #12]
 8004786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478a:	4605      	mov	r5, r0
 800478c:	0710      	lsls	r0, r2, #28
 800478e:	460c      	mov	r4, r1
 8004790:	d458      	bmi.n	8004844 <__sflush_r+0xc0>
 8004792:	684b      	ldr	r3, [r1, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dc05      	bgt.n	80047a4 <__sflush_r+0x20>
 8004798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	dc02      	bgt.n	80047a4 <__sflush_r+0x20>
 800479e:	2000      	movs	r0, #0
 80047a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047a6:	2e00      	cmp	r6, #0
 80047a8:	d0f9      	beq.n	800479e <__sflush_r+0x1a>
 80047aa:	2300      	movs	r3, #0
 80047ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047b0:	682f      	ldr	r7, [r5, #0]
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	d032      	beq.n	800481c <__sflush_r+0x98>
 80047b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	075a      	lsls	r2, r3, #29
 80047bc:	d505      	bpl.n	80047ca <__sflush_r+0x46>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	1ac0      	subs	r0, r0, r3
 80047c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047c4:	b10b      	cbz	r3, 80047ca <__sflush_r+0x46>
 80047c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047c8:	1ac0      	subs	r0, r0, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	4602      	mov	r2, r0
 80047ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047d0:	6a21      	ldr	r1, [r4, #32]
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b0      	blx	r6
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	d106      	bne.n	80047ea <__sflush_r+0x66>
 80047dc:	6829      	ldr	r1, [r5, #0]
 80047de:	291d      	cmp	r1, #29
 80047e0:	d82c      	bhi.n	800483c <__sflush_r+0xb8>
 80047e2:	4a2a      	ldr	r2, [pc, #168]	; (800488c <__sflush_r+0x108>)
 80047e4:	40ca      	lsrs	r2, r1
 80047e6:	07d6      	lsls	r6, r2, #31
 80047e8:	d528      	bpl.n	800483c <__sflush_r+0xb8>
 80047ea:	2200      	movs	r2, #0
 80047ec:	6062      	str	r2, [r4, #4]
 80047ee:	04d9      	lsls	r1, r3, #19
 80047f0:	6922      	ldr	r2, [r4, #16]
 80047f2:	6022      	str	r2, [r4, #0]
 80047f4:	d504      	bpl.n	8004800 <__sflush_r+0x7c>
 80047f6:	1c42      	adds	r2, r0, #1
 80047f8:	d101      	bne.n	80047fe <__sflush_r+0x7a>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	b903      	cbnz	r3, 8004800 <__sflush_r+0x7c>
 80047fe:	6560      	str	r0, [r4, #84]	; 0x54
 8004800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004802:	602f      	str	r7, [r5, #0]
 8004804:	2900      	cmp	r1, #0
 8004806:	d0ca      	beq.n	800479e <__sflush_r+0x1a>
 8004808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800480c:	4299      	cmp	r1, r3
 800480e:	d002      	beq.n	8004816 <__sflush_r+0x92>
 8004810:	4628      	mov	r0, r5
 8004812:	f000 f9d7 	bl	8004bc4 <_free_r>
 8004816:	2000      	movs	r0, #0
 8004818:	6360      	str	r0, [r4, #52]	; 0x34
 800481a:	e7c1      	b.n	80047a0 <__sflush_r+0x1c>
 800481c:	6a21      	ldr	r1, [r4, #32]
 800481e:	2301      	movs	r3, #1
 8004820:	4628      	mov	r0, r5
 8004822:	47b0      	blx	r6
 8004824:	1c41      	adds	r1, r0, #1
 8004826:	d1c7      	bne.n	80047b8 <__sflush_r+0x34>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0c4      	beq.n	80047b8 <__sflush_r+0x34>
 800482e:	2b1d      	cmp	r3, #29
 8004830:	d001      	beq.n	8004836 <__sflush_r+0xb2>
 8004832:	2b16      	cmp	r3, #22
 8004834:	d101      	bne.n	800483a <__sflush_r+0xb6>
 8004836:	602f      	str	r7, [r5, #0]
 8004838:	e7b1      	b.n	800479e <__sflush_r+0x1a>
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	e7ad      	b.n	80047a0 <__sflush_r+0x1c>
 8004844:	690f      	ldr	r7, [r1, #16]
 8004846:	2f00      	cmp	r7, #0
 8004848:	d0a9      	beq.n	800479e <__sflush_r+0x1a>
 800484a:	0793      	lsls	r3, r2, #30
 800484c:	680e      	ldr	r6, [r1, #0]
 800484e:	bf08      	it	eq
 8004850:	694b      	ldreq	r3, [r1, #20]
 8004852:	600f      	str	r7, [r1, #0]
 8004854:	bf18      	it	ne
 8004856:	2300      	movne	r3, #0
 8004858:	eba6 0807 	sub.w	r8, r6, r7
 800485c:	608b      	str	r3, [r1, #8]
 800485e:	f1b8 0f00 	cmp.w	r8, #0
 8004862:	dd9c      	ble.n	800479e <__sflush_r+0x1a>
 8004864:	6a21      	ldr	r1, [r4, #32]
 8004866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004868:	4643      	mov	r3, r8
 800486a:	463a      	mov	r2, r7
 800486c:	4628      	mov	r0, r5
 800486e:	47b0      	blx	r6
 8004870:	2800      	cmp	r0, #0
 8004872:	dc06      	bgt.n	8004882 <__sflush_r+0xfe>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800487a:	81a3      	strh	r3, [r4, #12]
 800487c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004880:	e78e      	b.n	80047a0 <__sflush_r+0x1c>
 8004882:	4407      	add	r7, r0
 8004884:	eba8 0800 	sub.w	r8, r8, r0
 8004888:	e7e9      	b.n	800485e <__sflush_r+0xda>
 800488a:	bf00      	nop
 800488c:	20400001 	.word	0x20400001

08004890 <_fflush_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	690b      	ldr	r3, [r1, #16]
 8004894:	4605      	mov	r5, r0
 8004896:	460c      	mov	r4, r1
 8004898:	b913      	cbnz	r3, 80048a0 <_fflush_r+0x10>
 800489a:	2500      	movs	r5, #0
 800489c:	4628      	mov	r0, r5
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	b118      	cbz	r0, 80048aa <_fflush_r+0x1a>
 80048a2:	6983      	ldr	r3, [r0, #24]
 80048a4:	b90b      	cbnz	r3, 80048aa <_fflush_r+0x1a>
 80048a6:	f000 f887 	bl	80049b8 <__sinit>
 80048aa:	4b14      	ldr	r3, [pc, #80]	; (80048fc <_fflush_r+0x6c>)
 80048ac:	429c      	cmp	r4, r3
 80048ae:	d11b      	bne.n	80048e8 <_fflush_r+0x58>
 80048b0:	686c      	ldr	r4, [r5, #4]
 80048b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ef      	beq.n	800489a <_fflush_r+0xa>
 80048ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048bc:	07d0      	lsls	r0, r2, #31
 80048be:	d404      	bmi.n	80048ca <_fflush_r+0x3a>
 80048c0:	0599      	lsls	r1, r3, #22
 80048c2:	d402      	bmi.n	80048ca <_fflush_r+0x3a>
 80048c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048c6:	f000 f915 	bl	8004af4 <__retarget_lock_acquire_recursive>
 80048ca:	4628      	mov	r0, r5
 80048cc:	4621      	mov	r1, r4
 80048ce:	f7ff ff59 	bl	8004784 <__sflush_r>
 80048d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d4:	07da      	lsls	r2, r3, #31
 80048d6:	4605      	mov	r5, r0
 80048d8:	d4e0      	bmi.n	800489c <_fflush_r+0xc>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	059b      	lsls	r3, r3, #22
 80048de:	d4dd      	bmi.n	800489c <_fflush_r+0xc>
 80048e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e2:	f000 f908 	bl	8004af6 <__retarget_lock_release_recursive>
 80048e6:	e7d9      	b.n	800489c <_fflush_r+0xc>
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <_fflush_r+0x70>)
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d101      	bne.n	80048f2 <_fflush_r+0x62>
 80048ee:	68ac      	ldr	r4, [r5, #8]
 80048f0:	e7df      	b.n	80048b2 <_fflush_r+0x22>
 80048f2:	4b04      	ldr	r3, [pc, #16]	; (8004904 <_fflush_r+0x74>)
 80048f4:	429c      	cmp	r4, r3
 80048f6:	bf08      	it	eq
 80048f8:	68ec      	ldreq	r4, [r5, #12]
 80048fa:	e7da      	b.n	80048b2 <_fflush_r+0x22>
 80048fc:	080050f0 	.word	0x080050f0
 8004900:	08005110 	.word	0x08005110
 8004904:	080050d0 	.word	0x080050d0

08004908 <std>:
 8004908:	2300      	movs	r3, #0
 800490a:	b510      	push	{r4, lr}
 800490c:	4604      	mov	r4, r0
 800490e:	e9c0 3300 	strd	r3, r3, [r0]
 8004912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004916:	6083      	str	r3, [r0, #8]
 8004918:	8181      	strh	r1, [r0, #12]
 800491a:	6643      	str	r3, [r0, #100]	; 0x64
 800491c:	81c2      	strh	r2, [r0, #14]
 800491e:	6183      	str	r3, [r0, #24]
 8004920:	4619      	mov	r1, r3
 8004922:	2208      	movs	r2, #8
 8004924:	305c      	adds	r0, #92	; 0x5c
 8004926:	f7ff fb6f 	bl	8004008 <memset>
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <std+0x38>)
 800492c:	6263      	str	r3, [r4, #36]	; 0x24
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <std+0x3c>)
 8004930:	62a3      	str	r3, [r4, #40]	; 0x28
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <std+0x40>)
 8004934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004936:	4b05      	ldr	r3, [pc, #20]	; (800494c <std+0x44>)
 8004938:	6224      	str	r4, [r4, #32]
 800493a:	6323      	str	r3, [r4, #48]	; 0x30
 800493c:	bd10      	pop	{r4, pc}
 800493e:	bf00      	nop
 8004940:	08004e2d 	.word	0x08004e2d
 8004944:	08004e4f 	.word	0x08004e4f
 8004948:	08004e87 	.word	0x08004e87
 800494c:	08004eab 	.word	0x08004eab

08004950 <_cleanup_r>:
 8004950:	4901      	ldr	r1, [pc, #4]	; (8004958 <_cleanup_r+0x8>)
 8004952:	f000 b8af 	b.w	8004ab4 <_fwalk_reent>
 8004956:	bf00      	nop
 8004958:	08004891 	.word	0x08004891

0800495c <__sfmoreglue>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	2268      	movs	r2, #104	; 0x68
 8004960:	1e4d      	subs	r5, r1, #1
 8004962:	4355      	muls	r5, r2
 8004964:	460e      	mov	r6, r1
 8004966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800496a:	f000 f997 	bl	8004c9c <_malloc_r>
 800496e:	4604      	mov	r4, r0
 8004970:	b140      	cbz	r0, 8004984 <__sfmoreglue+0x28>
 8004972:	2100      	movs	r1, #0
 8004974:	e9c0 1600 	strd	r1, r6, [r0]
 8004978:	300c      	adds	r0, #12
 800497a:	60a0      	str	r0, [r4, #8]
 800497c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004980:	f7ff fb42 	bl	8004008 <memset>
 8004984:	4620      	mov	r0, r4
 8004986:	bd70      	pop	{r4, r5, r6, pc}

08004988 <__sfp_lock_acquire>:
 8004988:	4801      	ldr	r0, [pc, #4]	; (8004990 <__sfp_lock_acquire+0x8>)
 800498a:	f000 b8b3 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 800498e:	bf00      	nop
 8004990:	2000542d 	.word	0x2000542d

08004994 <__sfp_lock_release>:
 8004994:	4801      	ldr	r0, [pc, #4]	; (800499c <__sfp_lock_release+0x8>)
 8004996:	f000 b8ae 	b.w	8004af6 <__retarget_lock_release_recursive>
 800499a:	bf00      	nop
 800499c:	2000542d 	.word	0x2000542d

080049a0 <__sinit_lock_acquire>:
 80049a0:	4801      	ldr	r0, [pc, #4]	; (80049a8 <__sinit_lock_acquire+0x8>)
 80049a2:	f000 b8a7 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 80049a6:	bf00      	nop
 80049a8:	2000542e 	.word	0x2000542e

080049ac <__sinit_lock_release>:
 80049ac:	4801      	ldr	r0, [pc, #4]	; (80049b4 <__sinit_lock_release+0x8>)
 80049ae:	f000 b8a2 	b.w	8004af6 <__retarget_lock_release_recursive>
 80049b2:	bf00      	nop
 80049b4:	2000542e 	.word	0x2000542e

080049b8 <__sinit>:
 80049b8:	b510      	push	{r4, lr}
 80049ba:	4604      	mov	r4, r0
 80049bc:	f7ff fff0 	bl	80049a0 <__sinit_lock_acquire>
 80049c0:	69a3      	ldr	r3, [r4, #24]
 80049c2:	b11b      	cbz	r3, 80049cc <__sinit+0x14>
 80049c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c8:	f7ff bff0 	b.w	80049ac <__sinit_lock_release>
 80049cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049d0:	6523      	str	r3, [r4, #80]	; 0x50
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <__sinit+0x68>)
 80049d4:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <__sinit+0x6c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80049da:	42a3      	cmp	r3, r4
 80049dc:	bf04      	itt	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	61a3      	streq	r3, [r4, #24]
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 f820 	bl	8004a28 <__sfp>
 80049e8:	6060      	str	r0, [r4, #4]
 80049ea:	4620      	mov	r0, r4
 80049ec:	f000 f81c 	bl	8004a28 <__sfp>
 80049f0:	60a0      	str	r0, [r4, #8]
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f818 	bl	8004a28 <__sfp>
 80049f8:	2200      	movs	r2, #0
 80049fa:	60e0      	str	r0, [r4, #12]
 80049fc:	2104      	movs	r1, #4
 80049fe:	6860      	ldr	r0, [r4, #4]
 8004a00:	f7ff ff82 	bl	8004908 <std>
 8004a04:	68a0      	ldr	r0, [r4, #8]
 8004a06:	2201      	movs	r2, #1
 8004a08:	2109      	movs	r1, #9
 8004a0a:	f7ff ff7d 	bl	8004908 <std>
 8004a0e:	68e0      	ldr	r0, [r4, #12]
 8004a10:	2202      	movs	r2, #2
 8004a12:	2112      	movs	r1, #18
 8004a14:	f7ff ff78 	bl	8004908 <std>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	61a3      	str	r3, [r4, #24]
 8004a1c:	e7d2      	b.n	80049c4 <__sinit+0xc>
 8004a1e:	bf00      	nop
 8004a20:	08005098 	.word	0x08005098
 8004a24:	08004951 	.word	0x08004951

08004a28 <__sfp>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	4607      	mov	r7, r0
 8004a2c:	f7ff ffac 	bl	8004988 <__sfp_lock_acquire>
 8004a30:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <__sfp+0x84>)
 8004a32:	681e      	ldr	r6, [r3, #0]
 8004a34:	69b3      	ldr	r3, [r6, #24]
 8004a36:	b913      	cbnz	r3, 8004a3e <__sfp+0x16>
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f7ff ffbd 	bl	80049b8 <__sinit>
 8004a3e:	3648      	adds	r6, #72	; 0x48
 8004a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	d503      	bpl.n	8004a50 <__sfp+0x28>
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	b30b      	cbz	r3, 8004a90 <__sfp+0x68>
 8004a4c:	6836      	ldr	r6, [r6, #0]
 8004a4e:	e7f7      	b.n	8004a40 <__sfp+0x18>
 8004a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a54:	b9d5      	cbnz	r5, 8004a8c <__sfp+0x64>
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <__sfp+0x88>)
 8004a58:	60e3      	str	r3, [r4, #12]
 8004a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8004a60:	f000 f847 	bl	8004af2 <__retarget_lock_init_recursive>
 8004a64:	f7ff ff96 	bl	8004994 <__sfp_lock_release>
 8004a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a70:	6025      	str	r5, [r4, #0]
 8004a72:	61a5      	str	r5, [r4, #24]
 8004a74:	2208      	movs	r2, #8
 8004a76:	4629      	mov	r1, r5
 8004a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a7c:	f7ff fac4 	bl	8004008 <memset>
 8004a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a88:	4620      	mov	r0, r4
 8004a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8c:	3468      	adds	r4, #104	; 0x68
 8004a8e:	e7d9      	b.n	8004a44 <__sfp+0x1c>
 8004a90:	2104      	movs	r1, #4
 8004a92:	4638      	mov	r0, r7
 8004a94:	f7ff ff62 	bl	800495c <__sfmoreglue>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	6030      	str	r0, [r6, #0]
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d1d5      	bne.n	8004a4c <__sfp+0x24>
 8004aa0:	f7ff ff78 	bl	8004994 <__sfp_lock_release>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	e7ee      	b.n	8004a88 <__sfp+0x60>
 8004aaa:	bf00      	nop
 8004aac:	08005098 	.word	0x08005098
 8004ab0:	ffff0001 	.word	0xffff0001

08004ab4 <_fwalk_reent>:
 8004ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab8:	4606      	mov	r6, r0
 8004aba:	4688      	mov	r8, r1
 8004abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ac0:	2700      	movs	r7, #0
 8004ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8004aca:	d505      	bpl.n	8004ad8 <_fwalk_reent+0x24>
 8004acc:	6824      	ldr	r4, [r4, #0]
 8004ace:	2c00      	cmp	r4, #0
 8004ad0:	d1f7      	bne.n	8004ac2 <_fwalk_reent+0xe>
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad8:	89ab      	ldrh	r3, [r5, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d907      	bls.n	8004aee <_fwalk_reent+0x3a>
 8004ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	d003      	beq.n	8004aee <_fwalk_reent+0x3a>
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	4630      	mov	r0, r6
 8004aea:	47c0      	blx	r8
 8004aec:	4307      	orrs	r7, r0
 8004aee:	3568      	adds	r5, #104	; 0x68
 8004af0:	e7e9      	b.n	8004ac6 <_fwalk_reent+0x12>

08004af2 <__retarget_lock_init_recursive>:
 8004af2:	4770      	bx	lr

08004af4 <__retarget_lock_acquire_recursive>:
 8004af4:	4770      	bx	lr

08004af6 <__retarget_lock_release_recursive>:
 8004af6:	4770      	bx	lr

08004af8 <__swhatbuf_r>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	460e      	mov	r6, r1
 8004afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b00:	2900      	cmp	r1, #0
 8004b02:	b096      	sub	sp, #88	; 0x58
 8004b04:	4614      	mov	r4, r2
 8004b06:	461d      	mov	r5, r3
 8004b08:	da08      	bge.n	8004b1c <__swhatbuf_r+0x24>
 8004b0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	602a      	str	r2, [r5, #0]
 8004b12:	061a      	lsls	r2, r3, #24
 8004b14:	d410      	bmi.n	8004b38 <__swhatbuf_r+0x40>
 8004b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b1a:	e00e      	b.n	8004b3a <__swhatbuf_r+0x42>
 8004b1c:	466a      	mov	r2, sp
 8004b1e:	f000 f9eb 	bl	8004ef8 <_fstat_r>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	dbf1      	blt.n	8004b0a <__swhatbuf_r+0x12>
 8004b26:	9a01      	ldr	r2, [sp, #4]
 8004b28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b30:	425a      	negs	r2, r3
 8004b32:	415a      	adcs	r2, r3
 8004b34:	602a      	str	r2, [r5, #0]
 8004b36:	e7ee      	b.n	8004b16 <__swhatbuf_r+0x1e>
 8004b38:	2340      	movs	r3, #64	; 0x40
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	b016      	add	sp, #88	; 0x58
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b44 <__smakebuf_r>:
 8004b44:	898b      	ldrh	r3, [r1, #12]
 8004b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b48:	079d      	lsls	r5, r3, #30
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	d507      	bpl.n	8004b60 <__smakebuf_r+0x1c>
 8004b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	2301      	movs	r3, #1
 8004b5a:	6163      	str	r3, [r4, #20]
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	ab01      	add	r3, sp, #4
 8004b62:	466a      	mov	r2, sp
 8004b64:	f7ff ffc8 	bl	8004af8 <__swhatbuf_r>
 8004b68:	9900      	ldr	r1, [sp, #0]
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f000 f895 	bl	8004c9c <_malloc_r>
 8004b72:	b948      	cbnz	r0, 8004b88 <__smakebuf_r+0x44>
 8004b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b78:	059a      	lsls	r2, r3, #22
 8004b7a:	d4ef      	bmi.n	8004b5c <__smakebuf_r+0x18>
 8004b7c:	f023 0303 	bic.w	r3, r3, #3
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	81a3      	strh	r3, [r4, #12]
 8004b86:	e7e3      	b.n	8004b50 <__smakebuf_r+0xc>
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <__smakebuf_r+0x7c>)
 8004b8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	6020      	str	r0, [r4, #0]
 8004b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b94:	81a3      	strh	r3, [r4, #12]
 8004b96:	9b00      	ldr	r3, [sp, #0]
 8004b98:	6163      	str	r3, [r4, #20]
 8004b9a:	9b01      	ldr	r3, [sp, #4]
 8004b9c:	6120      	str	r0, [r4, #16]
 8004b9e:	b15b      	cbz	r3, 8004bb8 <__smakebuf_r+0x74>
 8004ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f000 f9b9 	bl	8004f1c <_isatty_r>
 8004baa:	b128      	cbz	r0, 8004bb8 <__smakebuf_r+0x74>
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	81a3      	strh	r3, [r4, #12]
 8004bb8:	89a0      	ldrh	r0, [r4, #12]
 8004bba:	4305      	orrs	r5, r0
 8004bbc:	81a5      	strh	r5, [r4, #12]
 8004bbe:	e7cd      	b.n	8004b5c <__smakebuf_r+0x18>
 8004bc0:	08004951 	.word	0x08004951

08004bc4 <_free_r>:
 8004bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bc6:	2900      	cmp	r1, #0
 8004bc8:	d044      	beq.n	8004c54 <_free_r+0x90>
 8004bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bce:	9001      	str	r0, [sp, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004bd6:	bfb8      	it	lt
 8004bd8:	18e4      	addlt	r4, r4, r3
 8004bda:	f000 f9c1 	bl	8004f60 <__malloc_lock>
 8004bde:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <_free_r+0x94>)
 8004be0:	9801      	ldr	r0, [sp, #4]
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	b933      	cbnz	r3, 8004bf4 <_free_r+0x30>
 8004be6:	6063      	str	r3, [r4, #4]
 8004be8:	6014      	str	r4, [r2, #0]
 8004bea:	b003      	add	sp, #12
 8004bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bf0:	f000 b9bc 	b.w	8004f6c <__malloc_unlock>
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	d908      	bls.n	8004c0a <_free_r+0x46>
 8004bf8:	6825      	ldr	r5, [r4, #0]
 8004bfa:	1961      	adds	r1, r4, r5
 8004bfc:	428b      	cmp	r3, r1
 8004bfe:	bf01      	itttt	eq
 8004c00:	6819      	ldreq	r1, [r3, #0]
 8004c02:	685b      	ldreq	r3, [r3, #4]
 8004c04:	1949      	addeq	r1, r1, r5
 8004c06:	6021      	streq	r1, [r4, #0]
 8004c08:	e7ed      	b.n	8004be6 <_free_r+0x22>
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	b10b      	cbz	r3, 8004c14 <_free_r+0x50>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d9fa      	bls.n	8004c0a <_free_r+0x46>
 8004c14:	6811      	ldr	r1, [r2, #0]
 8004c16:	1855      	adds	r5, r2, r1
 8004c18:	42a5      	cmp	r5, r4
 8004c1a:	d10b      	bne.n	8004c34 <_free_r+0x70>
 8004c1c:	6824      	ldr	r4, [r4, #0]
 8004c1e:	4421      	add	r1, r4
 8004c20:	1854      	adds	r4, r2, r1
 8004c22:	42a3      	cmp	r3, r4
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	d1e0      	bne.n	8004bea <_free_r+0x26>
 8004c28:	681c      	ldr	r4, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	6053      	str	r3, [r2, #4]
 8004c2e:	4421      	add	r1, r4
 8004c30:	6011      	str	r1, [r2, #0]
 8004c32:	e7da      	b.n	8004bea <_free_r+0x26>
 8004c34:	d902      	bls.n	8004c3c <_free_r+0x78>
 8004c36:	230c      	movs	r3, #12
 8004c38:	6003      	str	r3, [r0, #0]
 8004c3a:	e7d6      	b.n	8004bea <_free_r+0x26>
 8004c3c:	6825      	ldr	r5, [r4, #0]
 8004c3e:	1961      	adds	r1, r4, r5
 8004c40:	428b      	cmp	r3, r1
 8004c42:	bf04      	itt	eq
 8004c44:	6819      	ldreq	r1, [r3, #0]
 8004c46:	685b      	ldreq	r3, [r3, #4]
 8004c48:	6063      	str	r3, [r4, #4]
 8004c4a:	bf04      	itt	eq
 8004c4c:	1949      	addeq	r1, r1, r5
 8004c4e:	6021      	streq	r1, [r4, #0]
 8004c50:	6054      	str	r4, [r2, #4]
 8004c52:	e7ca      	b.n	8004bea <_free_r+0x26>
 8004c54:	b003      	add	sp, #12
 8004c56:	bd30      	pop	{r4, r5, pc}
 8004c58:	20005430 	.word	0x20005430

08004c5c <sbrk_aligned>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	4e0e      	ldr	r6, [pc, #56]	; (8004c98 <sbrk_aligned+0x3c>)
 8004c60:	460c      	mov	r4, r1
 8004c62:	6831      	ldr	r1, [r6, #0]
 8004c64:	4605      	mov	r5, r0
 8004c66:	b911      	cbnz	r1, 8004c6e <sbrk_aligned+0x12>
 8004c68:	f000 f88c 	bl	8004d84 <_sbrk_r>
 8004c6c:	6030      	str	r0, [r6, #0]
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4628      	mov	r0, r5
 8004c72:	f000 f887 	bl	8004d84 <_sbrk_r>
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	d00a      	beq.n	8004c90 <sbrk_aligned+0x34>
 8004c7a:	1cc4      	adds	r4, r0, #3
 8004c7c:	f024 0403 	bic.w	r4, r4, #3
 8004c80:	42a0      	cmp	r0, r4
 8004c82:	d007      	beq.n	8004c94 <sbrk_aligned+0x38>
 8004c84:	1a21      	subs	r1, r4, r0
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f87c 	bl	8004d84 <_sbrk_r>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d101      	bne.n	8004c94 <sbrk_aligned+0x38>
 8004c90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c94:	4620      	mov	r0, r4
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	20005434 	.word	0x20005434

08004c9c <_malloc_r>:
 8004c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	1ccd      	adds	r5, r1, #3
 8004ca2:	f025 0503 	bic.w	r5, r5, #3
 8004ca6:	3508      	adds	r5, #8
 8004ca8:	2d0c      	cmp	r5, #12
 8004caa:	bf38      	it	cc
 8004cac:	250c      	movcc	r5, #12
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	db01      	blt.n	8004cb8 <_malloc_r+0x1c>
 8004cb4:	42a9      	cmp	r1, r5
 8004cb6:	d905      	bls.n	8004cc4 <_malloc_r+0x28>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	2600      	movs	r6, #0
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc4:	4e2e      	ldr	r6, [pc, #184]	; (8004d80 <_malloc_r+0xe4>)
 8004cc6:	f000 f94b 	bl	8004f60 <__malloc_lock>
 8004cca:	6833      	ldr	r3, [r6, #0]
 8004ccc:	461c      	mov	r4, r3
 8004cce:	bb34      	cbnz	r4, 8004d1e <_malloc_r+0x82>
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	f7ff ffc2 	bl	8004c5c <sbrk_aligned>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	4604      	mov	r4, r0
 8004cdc:	d14d      	bne.n	8004d7a <_malloc_r+0xde>
 8004cde:	6834      	ldr	r4, [r6, #0]
 8004ce0:	4626      	mov	r6, r4
 8004ce2:	2e00      	cmp	r6, #0
 8004ce4:	d140      	bne.n	8004d68 <_malloc_r+0xcc>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4638      	mov	r0, r7
 8004cec:	eb04 0803 	add.w	r8, r4, r3
 8004cf0:	f000 f848 	bl	8004d84 <_sbrk_r>
 8004cf4:	4580      	cmp	r8, r0
 8004cf6:	d13a      	bne.n	8004d6e <_malloc_r+0xd2>
 8004cf8:	6821      	ldr	r1, [r4, #0]
 8004cfa:	3503      	adds	r5, #3
 8004cfc:	1a6d      	subs	r5, r5, r1
 8004cfe:	f025 0503 	bic.w	r5, r5, #3
 8004d02:	3508      	adds	r5, #8
 8004d04:	2d0c      	cmp	r5, #12
 8004d06:	bf38      	it	cc
 8004d08:	250c      	movcc	r5, #12
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f7ff ffa5 	bl	8004c5c <sbrk_aligned>
 8004d12:	3001      	adds	r0, #1
 8004d14:	d02b      	beq.n	8004d6e <_malloc_r+0xd2>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	442b      	add	r3, r5
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	e00e      	b.n	8004d3c <_malloc_r+0xa0>
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	1b52      	subs	r2, r2, r5
 8004d22:	d41e      	bmi.n	8004d62 <_malloc_r+0xc6>
 8004d24:	2a0b      	cmp	r2, #11
 8004d26:	d916      	bls.n	8004d56 <_malloc_r+0xba>
 8004d28:	1961      	adds	r1, r4, r5
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	6025      	str	r5, [r4, #0]
 8004d2e:	bf18      	it	ne
 8004d30:	6059      	strne	r1, [r3, #4]
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	bf08      	it	eq
 8004d36:	6031      	streq	r1, [r6, #0]
 8004d38:	5162      	str	r2, [r4, r5]
 8004d3a:	604b      	str	r3, [r1, #4]
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	f104 060b 	add.w	r6, r4, #11
 8004d42:	f000 f913 	bl	8004f6c <__malloc_unlock>
 8004d46:	f026 0607 	bic.w	r6, r6, #7
 8004d4a:	1d23      	adds	r3, r4, #4
 8004d4c:	1af2      	subs	r2, r6, r3
 8004d4e:	d0b6      	beq.n	8004cbe <_malloc_r+0x22>
 8004d50:	1b9b      	subs	r3, r3, r6
 8004d52:	50a3      	str	r3, [r4, r2]
 8004d54:	e7b3      	b.n	8004cbe <_malloc_r+0x22>
 8004d56:	6862      	ldr	r2, [r4, #4]
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	bf0c      	ite	eq
 8004d5c:	6032      	streq	r2, [r6, #0]
 8004d5e:	605a      	strne	r2, [r3, #4]
 8004d60:	e7ec      	b.n	8004d3c <_malloc_r+0xa0>
 8004d62:	4623      	mov	r3, r4
 8004d64:	6864      	ldr	r4, [r4, #4]
 8004d66:	e7b2      	b.n	8004cce <_malloc_r+0x32>
 8004d68:	4634      	mov	r4, r6
 8004d6a:	6876      	ldr	r6, [r6, #4]
 8004d6c:	e7b9      	b.n	8004ce2 <_malloc_r+0x46>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4638      	mov	r0, r7
 8004d74:	f000 f8fa 	bl	8004f6c <__malloc_unlock>
 8004d78:	e7a1      	b.n	8004cbe <_malloc_r+0x22>
 8004d7a:	6025      	str	r5, [r4, #0]
 8004d7c:	e7de      	b.n	8004d3c <_malloc_r+0xa0>
 8004d7e:	bf00      	nop
 8004d80:	20005430 	.word	0x20005430

08004d84 <_sbrk_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4d06      	ldr	r5, [pc, #24]	; (8004da0 <_sbrk_r+0x1c>)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	602b      	str	r3, [r5, #0]
 8004d90:	f7fc fc34 	bl	80015fc <_sbrk>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_sbrk_r+0x1a>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_sbrk_r+0x1a>
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	20005438 	.word	0x20005438

08004da4 <_raise_r>:
 8004da4:	291f      	cmp	r1, #31
 8004da6:	b538      	push	{r3, r4, r5, lr}
 8004da8:	4604      	mov	r4, r0
 8004daa:	460d      	mov	r5, r1
 8004dac:	d904      	bls.n	8004db8 <_raise_r+0x14>
 8004dae:	2316      	movs	r3, #22
 8004db0:	6003      	str	r3, [r0, #0]
 8004db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004dba:	b112      	cbz	r2, 8004dc2 <_raise_r+0x1e>
 8004dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004dc0:	b94b      	cbnz	r3, 8004dd6 <_raise_r+0x32>
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 f830 	bl	8004e28 <_getpid_r>
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4601      	mov	r1, r0
 8004dcc:	4620      	mov	r0, r4
 8004dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dd2:	f000 b817 	b.w	8004e04 <_kill_r>
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d00a      	beq.n	8004df0 <_raise_r+0x4c>
 8004dda:	1c59      	adds	r1, r3, #1
 8004ddc:	d103      	bne.n	8004de6 <_raise_r+0x42>
 8004dde:	2316      	movs	r3, #22
 8004de0:	6003      	str	r3, [r0, #0]
 8004de2:	2001      	movs	r0, #1
 8004de4:	e7e7      	b.n	8004db6 <_raise_r+0x12>
 8004de6:	2400      	movs	r4, #0
 8004de8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004dec:	4628      	mov	r0, r5
 8004dee:	4798      	blx	r3
 8004df0:	2000      	movs	r0, #0
 8004df2:	e7e0      	b.n	8004db6 <_raise_r+0x12>

08004df4 <raise>:
 8004df4:	4b02      	ldr	r3, [pc, #8]	; (8004e00 <raise+0xc>)
 8004df6:	4601      	mov	r1, r0
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	f7ff bfd3 	b.w	8004da4 <_raise_r>
 8004dfe:	bf00      	nop
 8004e00:	2000000c 	.word	0x2000000c

08004e04 <_kill_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d07      	ldr	r5, [pc, #28]	; (8004e24 <_kill_r+0x20>)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	f7fc fb6b 	bl	80014ec <_kill>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d102      	bne.n	8004e20 <_kill_r+0x1c>
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	b103      	cbz	r3, 8004e20 <_kill_r+0x1c>
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	bd38      	pop	{r3, r4, r5, pc}
 8004e22:	bf00      	nop
 8004e24:	20005438 	.word	0x20005438

08004e28 <_getpid_r>:
 8004e28:	f7fc bb58 	b.w	80014dc <_getpid>

08004e2c <__sread>:
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	460c      	mov	r4, r1
 8004e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e34:	f000 f8a0 	bl	8004f78 <_read_r>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	bfab      	itete	ge
 8004e3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e40:	181b      	addge	r3, r3, r0
 8004e42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e46:	bfac      	ite	ge
 8004e48:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e4a:	81a3      	strhlt	r3, [r4, #12]
 8004e4c:	bd10      	pop	{r4, pc}

08004e4e <__swrite>:
 8004e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e52:	461f      	mov	r7, r3
 8004e54:	898b      	ldrh	r3, [r1, #12]
 8004e56:	05db      	lsls	r3, r3, #23
 8004e58:	4605      	mov	r5, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	d505      	bpl.n	8004e6c <__swrite+0x1e>
 8004e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e64:	2302      	movs	r3, #2
 8004e66:	2200      	movs	r2, #0
 8004e68:	f000 f868 	bl	8004f3c <_lseek_r>
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	4632      	mov	r2, r6
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e82:	f000 b817 	b.w	8004eb4 <_write_r>

08004e86 <__sseek>:
 8004e86:	b510      	push	{r4, lr}
 8004e88:	460c      	mov	r4, r1
 8004e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8e:	f000 f855 	bl	8004f3c <_lseek_r>
 8004e92:	1c43      	adds	r3, r0, #1
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	bf15      	itete	ne
 8004e98:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ea2:	81a3      	strheq	r3, [r4, #12]
 8004ea4:	bf18      	it	ne
 8004ea6:	81a3      	strhne	r3, [r4, #12]
 8004ea8:	bd10      	pop	{r4, pc}

08004eaa <__sclose>:
 8004eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eae:	f000 b813 	b.w	8004ed8 <_close_r>
	...

08004eb4 <_write_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d07      	ldr	r5, [pc, #28]	; (8004ed4 <_write_r+0x20>)
 8004eb8:	4604      	mov	r4, r0
 8004eba:	4608      	mov	r0, r1
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	602a      	str	r2, [r5, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f7fc fb49 	bl	800155a <_write>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_write_r+0x1e>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_write_r+0x1e>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	20005438 	.word	0x20005438

08004ed8 <_close_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d06      	ldr	r5, [pc, #24]	; (8004ef4 <_close_r+0x1c>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	f7fc fb55 	bl	8001592 <_close>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_close_r+0x1a>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_close_r+0x1a>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	20005438 	.word	0x20005438

08004ef8 <_fstat_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	; (8004f18 <_fstat_r+0x20>)
 8004efc:	2300      	movs	r3, #0
 8004efe:	4604      	mov	r4, r0
 8004f00:	4608      	mov	r0, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	602b      	str	r3, [r5, #0]
 8004f06:	f7fc fb50 	bl	80015aa <_fstat>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	d102      	bne.n	8004f14 <_fstat_r+0x1c>
 8004f0e:	682b      	ldr	r3, [r5, #0]
 8004f10:	b103      	cbz	r3, 8004f14 <_fstat_r+0x1c>
 8004f12:	6023      	str	r3, [r4, #0]
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
 8004f16:	bf00      	nop
 8004f18:	20005438 	.word	0x20005438

08004f1c <_isatty_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d06      	ldr	r5, [pc, #24]	; (8004f38 <_isatty_r+0x1c>)
 8004f20:	2300      	movs	r3, #0
 8004f22:	4604      	mov	r4, r0
 8004f24:	4608      	mov	r0, r1
 8004f26:	602b      	str	r3, [r5, #0]
 8004f28:	f7fc fb4f 	bl	80015ca <_isatty>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_isatty_r+0x1a>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_isatty_r+0x1a>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20005438 	.word	0x20005438

08004f3c <_lseek_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d07      	ldr	r5, [pc, #28]	; (8004f5c <_lseek_r+0x20>)
 8004f40:	4604      	mov	r4, r0
 8004f42:	4608      	mov	r0, r1
 8004f44:	4611      	mov	r1, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	602a      	str	r2, [r5, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f7fc fb48 	bl	80015e0 <_lseek>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_lseek_r+0x1e>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_lseek_r+0x1e>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	20005438 	.word	0x20005438

08004f60 <__malloc_lock>:
 8004f60:	4801      	ldr	r0, [pc, #4]	; (8004f68 <__malloc_lock+0x8>)
 8004f62:	f7ff bdc7 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 8004f66:	bf00      	nop
 8004f68:	2000542c 	.word	0x2000542c

08004f6c <__malloc_unlock>:
 8004f6c:	4801      	ldr	r0, [pc, #4]	; (8004f74 <__malloc_unlock+0x8>)
 8004f6e:	f7ff bdc2 	b.w	8004af6 <__retarget_lock_release_recursive>
 8004f72:	bf00      	nop
 8004f74:	2000542c 	.word	0x2000542c

08004f78 <_read_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4d07      	ldr	r5, [pc, #28]	; (8004f98 <_read_r+0x20>)
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	4608      	mov	r0, r1
 8004f80:	4611      	mov	r1, r2
 8004f82:	2200      	movs	r2, #0
 8004f84:	602a      	str	r2, [r5, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	f7fc faca 	bl	8001520 <_read>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d102      	bne.n	8004f96 <_read_r+0x1e>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	b103      	cbz	r3, 8004f96 <_read_r+0x1e>
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	20005438 	.word	0x20005438

08004f9c <_init>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_fini>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr
